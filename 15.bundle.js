(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{11:function(e,n,t){"use strict";var r,i,o,a,u,s,c,d,f,l,g,h,p,m,v,b,_,y,k;t.d(n,"h",(function(){return r})),t.d(n,"i",(function(){return i})),t.d(n,"f",(function(){return o})),t.d(n,"d",(function(){return d})),t.d(n,"b",(function(){return g})),t.d(n,"l",(function(){return m})),t.d(n,"a",(function(){return S})),t.d(n,"e",(function(){return T})),t.d(n,"g",(function(){return R})),t.d(n,"c",(function(){return D})),t.d(n,"j",(function(){return O})),t.d(n,"k",(function(){return $})),function(e){e.create=function(e,n){return{line:e,character:n}},e.is=function(e){var n=e;return Q.objectLiteral(n)&&Q.number(n.line)&&Q.number(n.character)}}(r||(r={})),function(e){e.create=function(e,n,t,i){if(Q.number(e)&&Q.number(n)&&Q.number(t)&&Q.number(i))return{start:r.create(e,n),end:r.create(t,i)};if(r.is(e)&&r.is(n))return{start:e,end:n};throw new Error("Range#create called with invalid arguments["+e+", "+n+", "+t+", "+i+"]")},e.is=function(e){var n=e;return Q.objectLiteral(n)&&r.is(n.start)&&r.is(n.end)}}(i||(i={})),function(e){e.create=function(e,n){return{uri:e,range:n}},e.is=function(e){var n=e;return Q.defined(n)&&i.is(n.range)&&(Q.string(n.uri)||Q.undefined(n.uri))}}(o||(o={})),function(e){e.create=function(e,n,t,r){return{targetUri:e,targetRange:n,targetSelectionRange:t,originSelectionRange:r}},e.is=function(e){var n=e;return Q.defined(n)&&i.is(n.targetRange)&&Q.string(n.targetUri)&&(i.is(n.targetSelectionRange)||Q.undefined(n.targetSelectionRange))&&(i.is(n.originSelectionRange)||Q.undefined(n.originSelectionRange))}}(a||(a={})),function(e){e.create=function(e,n,t,r){return{red:e,green:n,blue:t,alpha:r}},e.is=function(e){var n=e;return Q.number(n.red)&&Q.number(n.green)&&Q.number(n.blue)&&Q.number(n.alpha)}}(u||(u={})),function(e){e.create=function(e,n){return{range:e,color:n}},e.is=function(e){var n=e;return i.is(n.range)&&u.is(n.color)}}(s||(s={})),function(e){e.create=function(e,n,t){return{label:e,textEdit:n,additionalTextEdits:t}},e.is=function(e){var n=e;return Q.string(n.label)&&(Q.undefined(n.textEdit)||m.is(n))&&(Q.undefined(n.additionalTextEdits)||Q.typedArray(n.additionalTextEdits,m.is))}}(c||(c={})),function(e){e.Comment="comment",e.Imports="imports",e.Region="region"}(d||(d={})),function(e){e.create=function(e,n,t,r,i){var o={startLine:e,endLine:n};return Q.defined(t)&&(o.startCharacter=t),Q.defined(r)&&(o.endCharacter=r),Q.defined(i)&&(o.kind=i),o},e.is=function(e){var n=e;return Q.number(n.startLine)&&Q.number(n.startLine)&&(Q.undefined(n.startCharacter)||Q.number(n.startCharacter))&&(Q.undefined(n.endCharacter)||Q.number(n.endCharacter))&&(Q.undefined(n.kind)||Q.string(n.kind))}}(f||(f={})),function(e){e.create=function(e,n){return{location:e,message:n}},e.is=function(e){var n=e;return Q.defined(n)&&o.is(n.location)&&Q.string(n.message)}}(l||(l={})),function(e){e.Error=1,e.Warning=2,e.Information=3,e.Hint=4}(g||(g={})),function(e){e.create=function(e,n,t,r,i,o){var a={range:e,message:n};return Q.defined(t)&&(a.severity=t),Q.defined(r)&&(a.code=r),Q.defined(i)&&(a.source=i),Q.defined(o)&&(a.relatedInformation=o),a},e.is=function(e){var n=e;return Q.defined(n)&&i.is(n.range)&&Q.string(n.message)&&(Q.number(n.severity)||Q.undefined(n.severity))&&(Q.number(n.code)||Q.string(n.code)||Q.undefined(n.code))&&(Q.string(n.source)||Q.undefined(n.source))&&(Q.undefined(n.relatedInformation)||Q.typedArray(n.relatedInformation,l.is))}}(h||(h={})),function(e){e.create=function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var i={title:e,command:n};return Q.defined(t)&&t.length>0&&(i.arguments=t),i},e.is=function(e){var n=e;return Q.defined(n)&&Q.string(n.title)&&Q.string(n.command)}}(p||(p={})),function(e){e.replace=function(e,n){return{range:e,newText:n}},e.insert=function(e,n){return{range:{start:e,end:e},newText:n}},e.del=function(e){return{range:e,newText:""}},e.is=function(e){var n=e;return Q.objectLiteral(n)&&Q.string(n.newText)&&i.is(n.range)}}(m||(m={})),function(e){e.create=function(e,n){return{textDocument:e,edits:n}},e.is=function(e){var n=e;return Q.defined(n)&&x.is(n.textDocument)&&Array.isArray(n.edits)}}(v||(v={})),function(e){e.create=function(e,n){var t={kind:"create",uri:e};return void 0===n||void 0===n.overwrite&&void 0===n.ignoreIfExists||(t.options=n),t},e.is=function(e){var n=e;return n&&"create"===n.kind&&Q.string(n.uri)&&(void 0===n.options||(void 0===n.options.overwrite||Q.boolean(n.options.overwrite))&&(void 0===n.options.ignoreIfExists||Q.boolean(n.options.ignoreIfExists)))}}(b||(b={})),function(e){e.create=function(e,n,t){var r={kind:"rename",oldUri:e,newUri:n};return void 0===t||void 0===t.overwrite&&void 0===t.ignoreIfExists||(r.options=t),r},e.is=function(e){var n=e;return n&&"rename"===n.kind&&Q.string(n.oldUri)&&Q.string(n.newUri)&&(void 0===n.options||(void 0===n.options.overwrite||Q.boolean(n.options.overwrite))&&(void 0===n.options.ignoreIfExists||Q.boolean(n.options.ignoreIfExists)))}}(_||(_={})),function(e){e.create=function(e,n){var t={kind:"delete",uri:e};return void 0===n||void 0===n.recursive&&void 0===n.ignoreIfNotExists||(t.options=n),t},e.is=function(e){var n=e;return n&&"delete"===n.kind&&Q.string(n.uri)&&(void 0===n.options||(void 0===n.options.recursive||Q.boolean(n.options.recursive))&&(void 0===n.options.ignoreIfNotExists||Q.boolean(n.options.ignoreIfNotExists)))}}(y||(y={})),function(e){e.is=function(e){var n=e;return n&&(void 0!==n.changes||void 0!==n.documentChanges)&&(void 0===n.documentChanges||n.documentChanges.every((function(e){return Q.string(e.kind)?b.is(e)||_.is(e)||y.is(e):v.is(e)})))}}(k||(k={}));var w,x,C,E,I,S,T,j,M,R,F,P,A,D,L,O,W,N=function(){function e(e){this.edits=e}return e.prototype.insert=function(e,n){this.edits.push(m.insert(e,n))},e.prototype.replace=function(e,n){this.edits.push(m.replace(e,n))},e.prototype.delete=function(e){this.edits.push(m.del(e))},e.prototype.add=function(e){this.edits.push(e)},e.prototype.all=function(){return this.edits},e.prototype.clear=function(){this.edits.splice(0,this.edits.length)},e}();!function(){function e(e){var n=this;this._textEditChanges=Object.create(null),e&&(this._workspaceEdit=e,e.documentChanges?e.documentChanges.forEach((function(e){if(v.is(e)){var t=new N(e.edits);n._textEditChanges[e.textDocument.uri]=t}})):e.changes&&Object.keys(e.changes).forEach((function(t){var r=new N(e.changes[t]);n._textEditChanges[t]=r})))}Object.defineProperty(e.prototype,"edit",{get:function(){return this._workspaceEdit},enumerable:!0,configurable:!0}),e.prototype.getTextEditChange=function(e){if(x.is(e)){if(this._workspaceEdit||(this._workspaceEdit={documentChanges:[]}),!this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.");var n=e;if(!(r=this._textEditChanges[n.uri])){var t={textDocument:n,edits:i=[]};this._workspaceEdit.documentChanges.push(t),r=new N(i),this._textEditChanges[n.uri]=r}return r}if(this._workspaceEdit||(this._workspaceEdit={changes:Object.create(null)}),!this._workspaceEdit.changes)throw new Error("Workspace edit is not configured for normal text edit changes.");var r;if(!(r=this._textEditChanges[e])){var i=[];this._workspaceEdit.changes[e]=i,r=new N(i),this._textEditChanges[e]=r}return r},e.prototype.createFile=function(e,n){this.checkDocumentChanges(),this._workspaceEdit.documentChanges.push(b.create(e,n))},e.prototype.renameFile=function(e,n,t){this.checkDocumentChanges(),this._workspaceEdit.documentChanges.push(_.create(e,n,t))},e.prototype.deleteFile=function(e,n){this.checkDocumentChanges(),this._workspaceEdit.documentChanges.push(y.create(e,n))},e.prototype.checkDocumentChanges=function(){if(!this._workspaceEdit||!this._workspaceEdit.documentChanges)throw new Error("Workspace edit is not configured for document changes.")}}();!function(e){e.create=function(e){return{uri:e}},e.is=function(e){var n=e;return Q.defined(n)&&Q.string(n.uri)}}(w||(w={})),function(e){e.create=function(e,n){return{uri:e,version:n}},e.is=function(e){var n=e;return Q.defined(n)&&Q.string(n.uri)&&(null===n.version||Q.number(n.version))}}(x||(x={})),function(e){e.create=function(e,n,t,r){return{uri:e,languageId:n,version:t,text:r}},e.is=function(e){var n=e;return Q.defined(n)&&Q.string(n.uri)&&Q.string(n.languageId)&&Q.number(n.version)&&Q.string(n.text)}}(C||(C={})),function(e){e.PlainText="plaintext",e.Markdown="markdown"}(E||(E={})),function(e){e.is=function(n){var t=n;return t===e.PlainText||t===e.Markdown}}(E||(E={})),function(e){e.is=function(e){var n=e;return Q.objectLiteral(e)&&E.is(n.kind)&&Q.string(n.value)}}(I||(I={})),function(e){e.Text=1,e.Method=2,e.Function=3,e.Constructor=4,e.Field=5,e.Variable=6,e.Class=7,e.Interface=8,e.Module=9,e.Property=10,e.Unit=11,e.Value=12,e.Enum=13,e.Keyword=14,e.Snippet=15,e.Color=16,e.File=17,e.Reference=18,e.Folder=19,e.EnumMember=20,e.Constant=21,e.Struct=22,e.Event=23,e.Operator=24,e.TypeParameter=25}(S||(S={})),function(e){e.PlainText=1,e.Snippet=2}(T||(T={})),function(e){e.create=function(e){return{label:e}}}(j||(j={})),function(e){e.create=function(e,n){return{items:e||[],isIncomplete:!!n}}}(M||(M={})),function(e){e.fromPlainText=function(e){return e.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")},e.is=function(e){var n=e;return Q.string(n)||Q.objectLiteral(n)&&Q.string(n.language)&&Q.string(n.value)}}(R||(R={})),function(e){e.is=function(e){var n=e;return!!n&&Q.objectLiteral(n)&&(I.is(n.contents)||R.is(n.contents)||Q.typedArray(n.contents,R.is))&&(void 0===e.range||i.is(e.range))}}(F||(F={})),function(e){e.create=function(e,n){return n?{label:e,documentation:n}:{label:e}}}(P||(P={})),function(e){e.create=function(e,n){for(var t=[],r=2;r<arguments.length;r++)t[r-2]=arguments[r];var i={label:e};return Q.defined(n)&&(i.documentation=n),Q.defined(t)?i.parameters=t:i.parameters=[],i}}(A||(A={})),function(e){e.Text=1,e.Read=2,e.Write=3}(D||(D={})),function(e){e.create=function(e,n){var t={range:e};return Q.number(n)&&(t.kind=n),t}}(L||(L={})),function(e){e.File=1,e.Module=2,e.Namespace=3,e.Package=4,e.Class=5,e.Method=6,e.Property=7,e.Field=8,e.Constructor=9,e.Enum=10,e.Interface=11,e.Function=12,e.Variable=13,e.Constant=14,e.String=15,e.Number=16,e.Boolean=17,e.Array=18,e.Object=19,e.Key=20,e.Null=21,e.EnumMember=22,e.Struct=23,e.Event=24,e.Operator=25,e.TypeParameter=26}(O||(O={})),function(e){e.create=function(e,n,t,r,i){var o={name:e,kind:n,location:{uri:r,range:t}};return i&&(o.containerName=i),o}}(W||(W={}));var U,V,H,K,z,B=function(){};!function(e){e.create=function(e,n,t,r,i,o){var a={name:e,detail:n,kind:t,range:r,selectionRange:i};return void 0!==o&&(a.children=o),a},e.is=function(e){var n=e;return n&&Q.string(n.name)&&Q.number(n.kind)&&i.is(n.range)&&i.is(n.selectionRange)&&(void 0===n.detail||Q.string(n.detail))&&(void 0===n.deprecated||Q.boolean(n.deprecated))&&(void 0===n.children||Array.isArray(n.children))}}(B||(B={})),function(e){e.QuickFix="quickfix",e.Refactor="refactor",e.RefactorExtract="refactor.extract",e.RefactorInline="refactor.inline",e.RefactorRewrite="refactor.rewrite",e.Source="source",e.SourceOrganizeImports="source.organizeImports"}(U||(U={})),function(e){e.create=function(e,n){var t={diagnostics:e};return null!=n&&(t.only=n),t},e.is=function(e){var n=e;return Q.defined(n)&&Q.typedArray(n.diagnostics,h.is)&&(void 0===n.only||Q.typedArray(n.only,Q.string))}}(V||(V={})),function(e){e.create=function(e,n,t){var r={title:e};return p.is(n)?r.command=n:r.edit=n,void 0!==t&&(r.kind=t),r},e.is=function(e){var n=e;return n&&Q.string(n.title)&&(void 0===n.diagnostics||Q.typedArray(n.diagnostics,h.is))&&(void 0===n.kind||Q.string(n.kind))&&(void 0!==n.edit||void 0!==n.command)&&(void 0===n.command||p.is(n.command))&&(void 0===n.edit||k.is(n.edit))}}(H||(H={})),function(e){e.create=function(e,n){var t={range:e};return Q.defined(n)&&(t.data=n),t},e.is=function(e){var n=e;return Q.defined(n)&&i.is(n.range)&&(Q.undefined(n.command)||p.is(n.command))}}(K||(K={})),function(e){e.create=function(e,n){return{tabSize:e,insertSpaces:n}},e.is=function(e){var n=e;return Q.defined(n)&&Q.number(n.tabSize)&&Q.boolean(n.insertSpaces)}}(z||(z={}));var J=function(){};!function(e){e.create=function(e,n,t){return{range:e,target:n,data:t}},e.is=function(e){var n=e;return Q.defined(n)&&i.is(n.range)&&(Q.undefined(n.target)||Q.string(n.target))}}(J||(J={}));var $,q;!function(e){e.create=function(e,n,t,r){return new G(e,n,t,r)},e.is=function(e){var n=e;return!!(Q.defined(n)&&Q.string(n.uri)&&(Q.undefined(n.languageId)||Q.string(n.languageId))&&Q.number(n.lineCount)&&Q.func(n.getText)&&Q.func(n.positionAt)&&Q.func(n.offsetAt))},e.applyEdits=function(e,n){for(var t=e.getText(),r=function e(n,t){if(n.length<=1)return n;var r=n.length/2|0,i=n.slice(0,r),o=n.slice(r);e(i,t),e(o,t);var a=0,u=0,s=0;for(;a<i.length&&u<o.length;){var c=t(i[a],o[u]);n[s++]=c<=0?i[a++]:o[u++]}for(;a<i.length;)n[s++]=i[a++];for(;u<o.length;)n[s++]=o[u++];return n}(n,(function(e,n){var t=e.range.start.line-n.range.start.line;return 0===t?e.range.start.character-n.range.start.character:t})),i=t.length,o=r.length-1;o>=0;o--){var a=r[o],u=e.offsetAt(a.range.start),s=e.offsetAt(a.range.end);if(!(s<=i))throw new Error("Overlapping edit");t=t.substring(0,u)+a.newText+t.substring(s,t.length),i=u}return t}}($||($={})),function(e){e.Manual=1,e.AfterDelay=2,e.FocusOut=3}(q||(q={}));var Q,G=function(){function e(e,n,t,r){this._uri=e,this._languageId=n,this._version=t,this._content=r,this._lineOffsets=null}return Object.defineProperty(e.prototype,"uri",{get:function(){return this._uri},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"languageId",{get:function(){return this._languageId},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"version",{get:function(){return this._version},enumerable:!0,configurable:!0}),e.prototype.getText=function(e){if(e){var n=this.offsetAt(e.start),t=this.offsetAt(e.end);return this._content.substring(n,t)}return this._content},e.prototype.update=function(e,n){this._content=e.text,this._version=n,this._lineOffsets=null},e.prototype.getLineOffsets=function(){if(null===this._lineOffsets){for(var e=[],n=this._content,t=!0,r=0;r<n.length;r++){t&&(e.push(r),t=!1);var i=n.charAt(r);t="\r"===i||"\n"===i,"\r"===i&&r+1<n.length&&"\n"===n.charAt(r+1)&&r++}t&&n.length>0&&e.push(n.length),this._lineOffsets=e}return this._lineOffsets},e.prototype.positionAt=function(e){e=Math.max(Math.min(e,this._content.length),0);var n=this.getLineOffsets(),t=0,i=n.length;if(0===i)return r.create(0,e);for(;t<i;){var o=Math.floor((t+i)/2);n[o]>e?i=o:t=o+1}var a=t-1;return r.create(a,e-n[a])},e.prototype.offsetAt=function(e){var n=this.getLineOffsets();if(e.line>=n.length)return this._content.length;if(e.line<0)return 0;var t=n[e.line],r=e.line+1<n.length?n[e.line+1]:this._content.length;return Math.max(Math.min(t+e.character,r),t)},Object.defineProperty(e.prototype,"lineCount",{get:function(){return this.getLineOffsets().length},enumerable:!0,configurable:!0}),e}();!function(e){var n=Object.prototype.toString;e.defined=function(e){return void 0!==e},e.undefined=function(e){return void 0===e},e.boolean=function(e){return!0===e||!1===e},e.string=function(e){return"[object String]"===n.call(e)},e.number=function(e){return"[object Number]"===n.call(e)},e.func=function(e){return"[object Function]"===n.call(e)},e.objectLiteral=function(e){return null!==e&&"object"==typeof e},e.typedArray=function(e,n){return Array.isArray(e)&&e.every(n)}}(Q||(Q={}))},2117:function(e,n,t){"use strict";t.r(n),t.d(n,"setupMode",(function(){return E}));var r=function(){function e(e){var n=this;this._defaults=e,this._worker=null,this._idleCheckInterval=setInterval((function(){return n._checkIfIdle()}),3e4),this._lastUsedTime=0,this._configChangeListener=this._defaults.onDidChange((function(){return n._stopWorker()}))}return e.prototype._stopWorker=function(){this._worker&&(this._worker.dispose(),this._worker=null),this._client=null},e.prototype.dispose=function(){clearInterval(this._idleCheckInterval),this._configChangeListener.dispose(),this._stopWorker()},e.prototype._checkIfIdle=function(){this._worker&&(Date.now()-this._lastUsedTime>12e4&&this._stopWorker())},e.prototype._getClient=function(){return this._lastUsedTime=Date.now(),this._client||(this._worker=monaco.editor.createWebWorker({moduleId:"vs/language/html/htmlWorker",createData:{languageSettings:this._defaults.options,languageId:this._defaults.languageId},label:this._defaults.languageId}),this._client=this._worker.getProxy()),this._client},e.prototype.getLanguageServiceWorker=function(){for(var e,n=this,t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];return this._getClient().then((function(n){e=n})).then((function(e){return n._worker.withSyncedResources(t)})).then((function(n){return e}))},e}(),i=t(11),o=monaco.Range,a=function(){function e(e,n,t){var r=this;this._languageId=e,this._worker=n,this._disposables=[],this._listener=Object.create(null);var i=function(e){var n,t=e.getModeId();t===r._languageId&&(r._listener[e.uri.toString()]=e.onDidChangeContent((function(){clearTimeout(n),n=setTimeout((function(){return r._doValidate(e.uri,t)}),500)})),r._doValidate(e.uri,t))},o=function(e){monaco.editor.setModelMarkers(e,r._languageId,[]);var n=e.uri.toString(),t=r._listener[n];t&&(t.dispose(),delete r._listener[n])};this._disposables.push(monaco.editor.onDidCreateModel(i)),this._disposables.push(monaco.editor.onWillDisposeModel((function(e){o(e)}))),this._disposables.push(monaco.editor.onDidChangeModelLanguage((function(e){o(e.model),i(e.model)}))),this._disposables.push(t.onDidChange((function(e){monaco.editor.getModels().forEach((function(e){e.getModeId()===r._languageId&&(o(e),i(e))}))}))),this._disposables.push({dispose:function(){for(var e in r._listener)r._listener[e].dispose()}}),monaco.editor.getModels().forEach(i)}return e.prototype.dispose=function(){this._disposables.forEach((function(e){return e&&e.dispose()})),this._disposables=[]},e.prototype._doValidate=function(e,n){this._worker(e).then((function(t){return t.doValidation(e.toString()).then((function(t){var r=t.map((function(e){return t="number"==typeof(n=e).code?String(n.code):n.code,{severity:u(n.severity),startLineNumber:n.range.start.line+1,startColumn:n.range.start.character+1,endLineNumber:n.range.end.line+1,endColumn:n.range.end.character+1,message:n.message,code:t,source:n.source};var n,t}));monaco.editor.setModelMarkers(monaco.editor.getModel(e),n,r)}))})).then(void 0,(function(e){console.error(e)}))},e}();function u(e){switch(e){case i.b.Error:return monaco.MarkerSeverity.Error;case i.b.Warning:return monaco.MarkerSeverity.Warning;case i.b.Information:return monaco.MarkerSeverity.Info;case i.b.Hint:return monaco.MarkerSeverity.Hint;default:return monaco.MarkerSeverity.Info}}function s(e){if(e)return{character:e.column-1,line:e.lineNumber-1}}function c(e){if(e)return new o(e.start.line+1,e.start.character+1,e.end.line+1,e.end.character+1)}function d(e){var n=monaco.languages.CompletionItemKind;switch(e){case i.a.Text:return n.Text;case i.a.Method:return n.Method;case i.a.Function:return n.Function;case i.a.Constructor:return n.Constructor;case i.a.Field:return n.Field;case i.a.Variable:return n.Variable;case i.a.Class:return n.Class;case i.a.Interface:return n.Interface;case i.a.Module:return n.Module;case i.a.Property:return n.Property;case i.a.Unit:return n.Unit;case i.a.Value:return n.Value;case i.a.Enum:return n.Enum;case i.a.Keyword:return n.Keyword;case i.a.Snippet:return n.Snippet;case i.a.Color:return n.Color;case i.a.File:return n.File;case i.a.Reference:return n.Reference}return n.Property}function f(e){if(e)return{range:c(e.range),text:e.newText}}var l=function(){function e(e){this._worker=e}return Object.defineProperty(e.prototype,"triggerCharacters",{get:function(){return[".",":","<",'"',"=","/"]},enumerable:!0,configurable:!0}),e.prototype.provideCompletionItems=function(e,n,t,r){var a=e.uri;return this._worker(a).then((function(e){return e.doComplete(a.toString(),s(n))})).then((function(t){if(t){var r=e.getWordUntilPosition(n),a=new o(n.lineNumber,r.startColumn,n.lineNumber,r.endColumn),u=t.items.map((function(e){var n={label:e.label,insertText:e.insertText||e.label,sortText:e.sortText,filterText:e.filterText,documentation:e.documentation,detail:e.detail,range:a,kind:d(e.kind)};return e.textEdit&&(n.range=c(e.textEdit.range),n.insertText=e.textEdit.newText),e.additionalTextEdits&&(n.additionalTextEdits=e.additionalTextEdits.map(f)),e.insertTextFormat===i.e.Snippet&&(n.insertTextRules=monaco.languages.CompletionItemInsertTextRule.InsertAsSnippet),n}));return{isIncomplete:t.isIncomplete,suggestions:u}}}))},e}();function g(e){return"string"==typeof e?{value:e}:(n=e)&&"object"==typeof n&&"string"==typeof n.kind?"plaintext"===e.kind?{value:e.value.replace(/[\\`*_{}[\]()#+\-.!]/g,"\\$&")}:{value:e.value}:{value:"```"+e.language+"\n"+e.value+"\n```\n"};var n}function h(e){if(e)return Array.isArray(e)?e.map(g):[g(e)]}var p=function(){function e(e){this._worker=e}return e.prototype.provideHover=function(e,n,t){var r=e.uri;return this._worker(r).then((function(e){return e.doHover(r.toString(),s(n))})).then((function(e){if(e)return{range:c(e.range),contents:h(e.contents)}}))},e}();function m(e){var n=monaco.languages.DocumentHighlightKind;switch(e){case i.c.Read:return n.Read;case i.c.Write:return n.Write;case i.c.Text:return n.Text}return n.Text}var v=function(){function e(e){this._worker=e}return e.prototype.provideDocumentHighlights=function(e,n,t){var r=e.uri;return this._worker(r).then((function(e){return e.findDocumentHighlights(r.toString(),s(n))})).then((function(e){if(e)return e.map((function(e){return{range:c(e.range),kind:m(e.kind)}}))}))},e}();function b(e){var n=monaco.languages.SymbolKind;switch(e){case i.j.File:return n.Array;case i.j.Module:return n.Module;case i.j.Namespace:return n.Namespace;case i.j.Package:return n.Package;case i.j.Class:return n.Class;case i.j.Method:return n.Method;case i.j.Property:return n.Property;case i.j.Field:return n.Field;case i.j.Constructor:return n.Constructor;case i.j.Enum:return n.Enum;case i.j.Interface:return n.Interface;case i.j.Function:return n.Function;case i.j.Variable:return n.Variable;case i.j.Constant:return n.Constant;case i.j.String:return n.String;case i.j.Number:return n.Number;case i.j.Boolean:return n.Boolean;case i.j.Array:return n.Array}return n.Function}var _=function(){function e(e){this._worker=e}return e.prototype.provideDocumentSymbols=function(e,n){var t=e.uri;return this._worker(t).then((function(e){return e.findDocumentSymbols(t.toString())})).then((function(e){if(e)return e.map((function(e){return{name:e.name,detail:"",containerName:e.containerName,kind:b(e.kind),range:c(e.location.range),selectionRange:c(e.location.range)}}))}))},e}(),y=function(){function e(e){this._worker=e}return e.prototype.provideLinks=function(e,n){var t=e.uri;return this._worker(t).then((function(e){return e.findDocumentLinks(t.toString())})).then((function(e){if(e)return{links:e.map((function(e){return{range:c(e.range),url:e.target}}))}}))},e}();function k(e){return{tabSize:e.tabSize,insertSpaces:e.insertSpaces}}var w=function(){function e(e){this._worker=e}return e.prototype.provideDocumentFormattingEdits=function(e,n,t){var r=e.uri;return this._worker(r).then((function(e){return e.format(r.toString(),null,k(n)).then((function(e){if(e&&0!==e.length)return e.map(f)}))}))},e}(),x=function(){function e(e){this._worker=e}return e.prototype.provideDocumentRangeFormattingEdits=function(e,n,t,r){var i=e.uri;return this._worker(i).then((function(e){return e.format(i.toString(),function(e){if(e)return{start:s(e.getStartPosition()),end:s(e.getEndPosition())}}(n),k(t)).then((function(e){if(e&&0!==e.length)return e.map(f)}))}))},e}(),C=function(){function e(e){this._worker=e}return e.prototype.provideFoldingRanges=function(e,n,t){var r=e.uri;return this._worker(r).then((function(e){return e.provideFoldingRanges(r.toString(),n)})).then((function(e){if(e)return e.map((function(e){var n={start:e.startLine+1,end:e.endLine+1};return void 0!==e.kind&&(n.kind=function(e){switch(e){case i.d.Comment:return monaco.languages.FoldingRangeKind.Comment;case i.d.Imports:return monaco.languages.FoldingRangeKind.Imports;case i.d.Region:return monaco.languages.FoldingRangeKind.Region}return}(e.kind)),n}))}))},e}();function E(e){var n=new r(e),t=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return n.getLanguageServiceWorker.apply(n,e)},i=e.languageId;monaco.languages.registerCompletionItemProvider(i,new l(t)),monaco.languages.registerHoverProvider(i,new p(t)),monaco.languages.registerDocumentHighlightProvider(i,new v(t)),monaco.languages.registerLinkProvider(i,new y(t)),monaco.languages.registerFoldingRangeProvider(i,new C(t)),monaco.languages.registerDocumentSymbolProvider(i,new _(t)),"html"===i&&(monaco.languages.registerDocumentFormattingEditProvider(i,new w(t)),monaco.languages.registerDocumentRangeFormattingEditProvider(i,new x(t)),new a(i,t,e))}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvbGFuZ3VhZ2UvaHRtbC9fZGVwcy92c2NvZGUtbGFuZ3VhZ2VzZXJ2ZXItdHlwZXMvbWFpbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbW9uYWNvLWVkaXRvci9lc20vdnMvbGFuZ3VhZ2UvaHRtbC93b3JrZXJNYW5hZ2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9tb25hY28tZWRpdG9yL2VzbS92cy9sYW5ndWFnZS9odG1sL2xhbmd1YWdlRmVhdHVyZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL21vbmFjby1lZGl0b3IvZXNtL3ZzL2xhbmd1YWdlL2h0bWwvaHRtbE1vZGUuanMiXSwibmFtZXMiOlsiUG9zaXRpb24iLCJSYW5nZSIsIkxvY2F0aW9uIiwiTG9jYXRpb25MaW5rIiwiQ29sb3IiLCJDb2xvckluZm9ybWF0aW9uIiwiQ29sb3JQcmVzZW50YXRpb24iLCJGb2xkaW5nUmFuZ2VLaW5kIiwiRm9sZGluZ1JhbmdlIiwiRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiIsIkRpYWdub3N0aWNTZXZlcml0eSIsIkRpYWdub3N0aWMiLCJDb21tYW5kIiwiVGV4dEVkaXQiLCJUZXh0RG9jdW1lbnRFZGl0IiwiQ3JlYXRlRmlsZSIsIlJlbmFtZUZpbGUiLCJEZWxldGVGaWxlIiwiV29ya3NwYWNlRWRpdCIsImNyZWF0ZSIsImxpbmUiLCJjaGFyYWN0ZXIiLCJpcyIsInZhbHVlIiwiY2FuZGlkYXRlIiwiSXMiLCJvYmplY3RMaXRlcmFsIiwibnVtYmVyIiwib25lIiwidHdvIiwidGhyZWUiLCJmb3VyIiwic3RhcnQiLCJlbmQiLCJFcnJvciIsInVyaSIsInJhbmdlIiwiZGVmaW5lZCIsInN0cmluZyIsInVuZGVmaW5lZCIsInRhcmdldFVyaSIsInRhcmdldFJhbmdlIiwidGFyZ2V0U2VsZWN0aW9uUmFuZ2UiLCJvcmlnaW5TZWxlY3Rpb25SYW5nZSIsInJlZCIsImdyZWVuIiwiYmx1ZSIsImFscGhhIiwiY29sb3IiLCJsYWJlbCIsInRleHRFZGl0IiwiYWRkaXRpb25hbFRleHRFZGl0cyIsInR5cGVkQXJyYXkiLCJzdGFydExpbmUiLCJlbmRMaW5lIiwic3RhcnRDaGFyYWN0ZXIiLCJlbmRDaGFyYWN0ZXIiLCJraW5kIiwicmVzdWx0IiwibG9jYXRpb24iLCJtZXNzYWdlIiwiV2FybmluZyIsIkluZm9ybWF0aW9uIiwiSGludCIsInNldmVyaXR5IiwiY29kZSIsInNvdXJjZSIsInJlbGF0ZWRJbmZvcm1hdGlvbiIsInRpdGxlIiwiY29tbWFuZCIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInJlcGxhY2UiLCJuZXdUZXh0IiwiaW5zZXJ0IiwicG9zaXRpb24iLCJkZWwiLCJ0ZXh0RG9jdW1lbnQiLCJlZGl0cyIsIlZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIiLCJBcnJheSIsImlzQXJyYXkiLCJvcHRpb25zIiwib3ZlcndyaXRlIiwiaWdub3JlSWZFeGlzdHMiLCJib29sZWFuIiwib2xkVXJpIiwibmV3VXJpIiwicmVjdXJzaXZlIiwiaWdub3JlSWZOb3RFeGlzdHMiLCJjaGFuZ2VzIiwiZG9jdW1lbnRDaGFuZ2VzIiwiZXZlcnkiLCJjaGFuZ2UiLCJUZXh0RG9jdW1lbnRJZGVudGlmaWVyIiwiVGV4dERvY3VtZW50SXRlbSIsIk1hcmt1cEtpbmQiLCJNYXJrdXBDb250ZW50IiwiQ29tcGxldGlvbkl0ZW1LaW5kIiwiSW5zZXJ0VGV4dEZvcm1hdCIsIkNvbXBsZXRpb25JdGVtIiwiQ29tcGxldGlvbkxpc3QiLCJNYXJrZWRTdHJpbmciLCJIb3ZlciIsIlBhcmFtZXRlckluZm9ybWF0aW9uIiwiU2lnbmF0dXJlSW5mb3JtYXRpb24iLCJEb2N1bWVudEhpZ2hsaWdodEtpbmQiLCJEb2N1bWVudEhpZ2hsaWdodCIsIlN5bWJvbEtpbmQiLCJTeW1ib2xJbmZvcm1hdGlvbiIsIlRleHRFZGl0Q2hhbmdlSW1wbCIsInRoaXMiLCJwcm90b3R5cGUiLCJwdXNoIiwiZGVsZXRlIiwiYWRkIiwiZWRpdCIsImFsbCIsImNsZWFyIiwic3BsaWNlIiwiV29ya3NwYWNlQ2hhbmdlIiwid29ya3NwYWNlRWRpdCIsIl90aGlzIiwiX3RleHRFZGl0Q2hhbmdlcyIsIk9iamVjdCIsIl93b3Jrc3BhY2VFZGl0IiwiZm9yRWFjaCIsInRleHRFZGl0Q2hhbmdlIiwia2V5cyIsImtleSIsImRlZmluZVByb3BlcnR5IiwiZ2V0IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsImdldFRleHRFZGl0Q2hhbmdlIiwidGV4dERvY3VtZW50RWRpdCIsImNyZWF0ZUZpbGUiLCJjaGVja0RvY3VtZW50Q2hhbmdlcyIsInJlbmFtZUZpbGUiLCJkZWxldGVGaWxlIiwidmVyc2lvbiIsImxhbmd1YWdlSWQiLCJ0ZXh0IiwiUGxhaW5UZXh0IiwiTWFya2Rvd24iLCJUZXh0IiwiTWV0aG9kIiwiRnVuY3Rpb24iLCJDb25zdHJ1Y3RvciIsIkZpZWxkIiwiVmFyaWFibGUiLCJDbGFzcyIsIkludGVyZmFjZSIsIk1vZHVsZSIsIlByb3BlcnR5IiwiVW5pdCIsIlZhbHVlIiwiRW51bSIsIktleXdvcmQiLCJTbmlwcGV0IiwiRmlsZSIsIlJlZmVyZW5jZSIsIkZvbGRlciIsIkVudW1NZW1iZXIiLCJDb25zdGFudCIsIlN0cnVjdCIsIkV2ZW50IiwiT3BlcmF0b3IiLCJUeXBlUGFyYW1ldGVyIiwiaXRlbXMiLCJpc0luY29tcGxldGUiLCJmcm9tUGxhaW5UZXh0IiwicGxhaW5UZXh0IiwibGFuZ3VhZ2UiLCJjb250ZW50cyIsImRvY3VtZW50YXRpb24iLCJwYXJhbWV0ZXJzIiwiUmVhZCIsIldyaXRlIiwiTmFtZXNwYWNlIiwiUGFja2FnZSIsIlN0cmluZyIsIk51bWJlciIsIkJvb2xlYW4iLCJLZXkiLCJOdWxsIiwibmFtZSIsImNvbnRhaW5lck5hbWUiLCJDb2RlQWN0aW9uS2luZCIsIkNvZGVBY3Rpb25Db250ZXh0IiwiQ29kZUFjdGlvbiIsIkNvZGVMZW5zIiwiRm9ybWF0dGluZ09wdGlvbnMiLCJEb2N1bWVudFN5bWJvbCIsImRldGFpbCIsInNlbGVjdGlvblJhbmdlIiwiY2hpbGRyZW4iLCJkZXByZWNhdGVkIiwiUXVpY2tGaXgiLCJSZWZhY3RvciIsIlJlZmFjdG9yRXh0cmFjdCIsIlJlZmFjdG9ySW5saW5lIiwiUmVmYWN0b3JSZXdyaXRlIiwiU291cmNlIiwiU291cmNlT3JnYW5pemVJbXBvcnRzIiwiZGlhZ25vc3RpY3MiLCJvbmx5IiwiY29tbWFuZE9yRWRpdCIsImRhdGEiLCJ0YWJTaXplIiwiaW5zZXJ0U3BhY2VzIiwiRG9jdW1lbnRMaW5rIiwidGFyZ2V0IiwiVGV4dERvY3VtZW50IiwiVGV4dERvY3VtZW50U2F2ZVJlYXNvbiIsImNvbnRlbnQiLCJGdWxsVGV4dERvY3VtZW50IiwibGluZUNvdW50IiwiZnVuYyIsImdldFRleHQiLCJwb3NpdGlvbkF0Iiwib2Zmc2V0QXQiLCJhcHBseUVkaXRzIiwiZG9jdW1lbnQiLCJzb3J0ZWRFZGl0cyIsIm1lcmdlU29ydCIsImNvbXBhcmUiLCJwIiwibGVmdCIsInNsaWNlIiwicmlnaHQiLCJsZWZ0SWR4IiwicmlnaHRJZHgiLCJpIiwicmV0IiwiYSIsImIiLCJkaWZmIiwibGFzdE1vZGlmaWVkT2Zmc2V0IiwiZSIsInN0YXJ0T2Zmc2V0IiwiZW5kT2Zmc2V0Iiwic3Vic3RyaW5nIiwiTWFudWFsIiwiQWZ0ZXJEZWxheSIsIkZvY3VzT3V0IiwiX3VyaSIsIl9sYW5ndWFnZUlkIiwiX3ZlcnNpb24iLCJfY29udGVudCIsIl9saW5lT2Zmc2V0cyIsInVwZGF0ZSIsImV2ZW50IiwiZ2V0TGluZU9mZnNldHMiLCJsaW5lT2Zmc2V0cyIsImlzTGluZVN0YXJ0IiwiY2giLCJjaGFyQXQiLCJvZmZzZXQiLCJNYXRoIiwibWF4IiwibWluIiwibG93IiwiaGlnaCIsIm1pZCIsImZsb29yIiwibGluZU9mZnNldCIsIm5leHRMaW5lT2Zmc2V0IiwidG9TdHJpbmciLCJjYWxsIiwiY2hlY2siLCJXb3JrZXJNYW5hZ2VyIiwiZGVmYXVsdHMiLCJfZGVmYXVsdHMiLCJfd29ya2VyIiwiX2lkbGVDaGVja0ludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJfY2hlY2tJZklkbGUiLCJfbGFzdFVzZWRUaW1lIiwiX2NvbmZpZ0NoYW5nZUxpc3RlbmVyIiwib25EaWRDaGFuZ2UiLCJfc3RvcFdvcmtlciIsImRpc3Bvc2UiLCJfY2xpZW50IiwiY2xlYXJJbnRlcnZhbCIsIkRhdGUiLCJub3ciLCJfZ2V0Q2xpZW50IiwibW9uYWNvIiwiZWRpdG9yIiwiY3JlYXRlV2ViV29ya2VyIiwibW9kdWxlSWQiLCJjcmVhdGVEYXRhIiwibGFuZ3VhZ2VTZXR0aW5ncyIsImdldFByb3h5IiwiZ2V0TGFuZ3VhZ2VTZXJ2aWNlV29ya2VyIiwicmVzb3VyY2VzIiwidGhlbiIsImNsaWVudCIsIl8iLCJ3aXRoU3luY2VkUmVzb3VyY2VzIiwiRGlhZ25vc3RpY3NBZGFwdGVyIiwiX2Rpc3Bvc2FibGVzIiwiX2xpc3RlbmVyIiwib25Nb2RlbEFkZCIsIm1vZGVsIiwiaGFuZGxlIiwibW9kZUlkIiwiZ2V0TW9kZUlkIiwib25EaWRDaGFuZ2VDb250ZW50IiwiY2xlYXJUaW1lb3V0Iiwic2V0VGltZW91dCIsIl9kb1ZhbGlkYXRlIiwib25Nb2RlbFJlbW92ZWQiLCJzZXRNb2RlbE1hcmtlcnMiLCJ1cmlTdHIiLCJsaXN0ZW5lciIsIm9uRGlkQ3JlYXRlTW9kZWwiLCJvbldpbGxEaXNwb3NlTW9kZWwiLCJvbkRpZENoYW5nZU1vZGVsTGFuZ3VhZ2UiLCJnZXRNb2RlbHMiLCJkIiwicmVzb3VyY2UiLCJ3b3JrZXIiLCJkb1ZhbGlkYXRpb24iLCJtYXJrZXJzIiwibWFwIiwiZGlhZyIsInRvU2V2ZXJpdHkiLCJzdGFydExpbmVOdW1iZXIiLCJzdGFydENvbHVtbiIsImVuZExpbmVOdW1iZXIiLCJlbmRDb2x1bW4iLCJnZXRNb2RlbCIsImVyciIsImNvbnNvbGUiLCJlcnJvciIsImxzU2V2ZXJpdHkiLCJNYXJrZXJTZXZlcml0eSIsIkluZm8iLCJmcm9tUG9zaXRpb24iLCJjb2x1bW4iLCJsaW5lTnVtYmVyIiwidG9SYW5nZSIsInRvQ29tcGxldGlvbkl0ZW1LaW5kIiwibUl0ZW1LaW5kIiwibGFuZ3VhZ2VzIiwidG9UZXh0RWRpdCIsIkNvbXBsZXRpb25BZGFwdGVyIiwicHJvdmlkZUNvbXBsZXRpb25JdGVtcyIsImNvbnRleHQiLCJ0b2tlbiIsImRvQ29tcGxldGUiLCJpbmZvIiwid29yZEluZm8iLCJnZXRXb3JkVW50aWxQb3NpdGlvbiIsIndvcmRSYW5nZSIsImVudHJ5IiwiaXRlbSIsImluc2VydFRleHQiLCJzb3J0VGV4dCIsImZpbHRlclRleHQiLCJpbnNlcnRUZXh0Rm9ybWF0IiwiaW5zZXJ0VGV4dFJ1bGVzIiwiQ29tcGxldGlvbkl0ZW1JbnNlcnRUZXh0UnVsZSIsIkluc2VydEFzU25pcHBldCIsInN1Z2dlc3Rpb25zIiwidG9NYXJrZG93blN0cmluZyIsInRoaW5nIiwidG9NYXJrZWRTdHJpbmdBcnJheSIsIkhvdmVyQWRhcHRlciIsInByb3ZpZGVIb3ZlciIsImRvSG92ZXIiLCJ0b0hpZ2hsaWdoS2luZCIsIm1LaW5kIiwiRG9jdW1lbnRIaWdobGlnaHRBZGFwdGVyIiwicHJvdmlkZURvY3VtZW50SGlnaGxpZ2h0cyIsImZpbmREb2N1bWVudEhpZ2hsaWdodHMiLCJ0b1N5bWJvbEtpbmQiLCJEb2N1bWVudFN5bWJvbEFkYXB0ZXIiLCJwcm92aWRlRG9jdW1lbnRTeW1ib2xzIiwiZmluZERvY3VtZW50U3ltYm9scyIsIkRvY3VtZW50TGlua0FkYXB0ZXIiLCJwcm92aWRlTGlua3MiLCJmaW5kRG9jdW1lbnRMaW5rcyIsImxpbmtzIiwidXJsIiwiZnJvbUZvcm1hdHRpbmdPcHRpb25zIiwiRG9jdW1lbnRGb3JtYXR0aW5nRWRpdFByb3ZpZGVyIiwicHJvdmlkZURvY3VtZW50Rm9ybWF0dGluZ0VkaXRzIiwiZm9ybWF0IiwiRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0UHJvdmlkZXIiLCJwcm92aWRlRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0cyIsImdldFN0YXJ0UG9zaXRpb24iLCJnZXRFbmRQb3NpdGlvbiIsImZyb21SYW5nZSIsIkZvbGRpbmdSYW5nZUFkYXB0ZXIiLCJwcm92aWRlRm9sZGluZ1JhbmdlcyIsInJhbmdlcyIsIkNvbW1lbnQiLCJJbXBvcnRzIiwiUmVnaW9uIiwidG9Gb2xkaW5nUmFuZ2VLaW5kIiwic2V0dXBNb2RlIiwidXJpcyIsImFwcGx5IiwicmVnaXN0ZXJDb21wbGV0aW9uSXRlbVByb3ZpZGVyIiwicmVnaXN0ZXJIb3ZlclByb3ZpZGVyIiwicmVnaXN0ZXJEb2N1bWVudEhpZ2hsaWdodFByb3ZpZGVyIiwicmVnaXN0ZXJMaW5rUHJvdmlkZXIiLCJyZWdpc3RlckZvbGRpbmdSYW5nZVByb3ZpZGVyIiwicmVnaXN0ZXJEb2N1bWVudFN5bWJvbFByb3ZpZGVyIiwicmVnaXN0ZXJEb2N1bWVudEZvcm1hdHRpbmdFZGl0UHJvdmlkZXIiLCJyZWdpc3RlckRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyIl0sIm1hcHBpbmdzIjoiMEZBU08sSUFBSUEsRUF3QkFDLEVBMkJBQyxFQXdCQUMsRUE0QkFDLEVBOEJBQyxFQXlCQUMsRUEyQkFDLEVBbUJBQyxFQXNDQUMsRUF3QkFDLEVBdUJBQyxFQXlDQUMsRUE4QkFDLEVBd0NBQyxFQWlCQUMsRUFxQkFDLEVBc0JBQyxFQXFCQUMsRUExZVgsd1pBVUEsU0FBV2xCLEdBU1BBLEVBQVNtQixPQUhULFNBQWdCQyxFQUFNQyxHQUNsQixNQUFPLENBQUVELEtBQU1BLEVBQU1DLFVBQVdBLElBVXBDckIsRUFBU3NCLEdBSlQsU0FBWUMsR0FDUixJQUFJQyxFQUFZRCxFQUNoQixPQUFPRSxFQUFHQyxjQUFjRixJQUFjQyxFQUFHRSxPQUFPSCxFQUFVSixPQUFTSyxFQUFHRSxPQUFPSCxFQUFVSCxZQWYvRixDQWtCR3JCLElBQWFBLEVBQVcsS0FNM0IsU0FBV0MsR0FZUEEsRUFBTWtCLE9BWE4sU0FBZ0JTLEVBQUtDLEVBQUtDLEVBQU9DLEdBQzdCLEdBQUlOLEVB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QnNMLElBQ3JGbkMsT0FBTzBELFVBQVU4RCxrQ0FBa0MzUSxFQUFZLElBQUksRUFBMENzTCxJQUM3R25DLE9BQU8wRCxVQUFVK0QscUJBQXFCNVEsRUFBWSxJQUFJLEVBQXFDc0wsSUFDM0ZuQyxPQUFPMEQsVUFBVWdFLDZCQUE2QjdRLEVBQVksSUFBSSxFQUFxQ3NMLElBQ25HbkMsT0FBTzBELFVBQVVpRSwrQkFBK0I5USxFQUFZLElBQUksRUFBdUNzTCxJQUVwRixTQUFmdEwsSUFDQW1KLE9BQU8wRCxVQUFVa0UsdUNBQXVDL1EsRUFBWSxJQUFJLEVBQWdEc0wsSUFDeEhuQyxPQUFPMEQsVUFBVW1FLDRDQUE0Q2hSLEVBQVksSUFBSSxFQUFxRHNMLElBQ2xJLElBQUksRUFBb0N0TCxFQUFZc0wsRUFBUW5EIiwiZmlsZSI6IjE1LmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAqIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxyXG4gKiAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cclxuJ3VzZSBzdHJpY3QnO1xyXG4vKipcclxuICogVGhlIFBvc2l0aW9uIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxyXG4gKiBbUG9zaXRpb25dKCNQb3NpdGlvbikgbGl0ZXJhbHMuXHJcbiAqL1xyXG5leHBvcnQgdmFyIFBvc2l0aW9uO1xyXG4oZnVuY3Rpb24gKFBvc2l0aW9uKSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgUG9zaXRpb24gbGl0ZXJhbCBmcm9tIHRoZSBnaXZlbiBsaW5lIGFuZCBjaGFyYWN0ZXIuXHJcbiAgICAgKiBAcGFyYW0gbGluZSBUaGUgcG9zaXRpb24ncyBsaW5lLlxyXG4gICAgICogQHBhcmFtIGNoYXJhY3RlciBUaGUgcG9zaXRpb24ncyBjaGFyYWN0ZXIuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZShsaW5lLCBjaGFyYWN0ZXIpIHtcclxuICAgICAgICByZXR1cm4geyBsaW5lOiBsaW5lLCBjaGFyYWN0ZXI6IGNoYXJhY3RlciB9O1xyXG4gICAgfVxyXG4gICAgUG9zaXRpb24uY3JlYXRlID0gY3JlYXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJuYWwgY29uZm9ybXMgdG8gdGhlIFtQb3NpdGlvbl0oI1Bvc2l0aW9uKSBpbnRlcmZhY2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKGNhbmRpZGF0ZSkgJiYgSXMubnVtYmVyKGNhbmRpZGF0ZS5saW5lKSAmJiBJcy5udW1iZXIoY2FuZGlkYXRlLmNoYXJhY3Rlcik7XHJcbiAgICB9XHJcbiAgICBQb3NpdGlvbi5pcyA9IGlzO1xyXG59KShQb3NpdGlvbiB8fCAoUG9zaXRpb24gPSB7fSkpO1xyXG4vKipcclxuICogVGhlIFJhbmdlIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxyXG4gKiBbUmFuZ2VdKCNSYW5nZSkgbGl0ZXJhbHMuXHJcbiAqL1xyXG5leHBvcnQgdmFyIFJhbmdlO1xyXG4oZnVuY3Rpb24gKFJhbmdlKSB7XHJcbiAgICBmdW5jdGlvbiBjcmVhdGUob25lLCB0d28sIHRocmVlLCBmb3VyKSB7XHJcbiAgICAgICAgaWYgKElzLm51bWJlcihvbmUpICYmIElzLm51bWJlcih0d28pICYmIElzLm51bWJlcih0aHJlZSkgJiYgSXMubnVtYmVyKGZvdXIpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXJ0OiBQb3NpdGlvbi5jcmVhdGUob25lLCB0d28pLCBlbmQ6IFBvc2l0aW9uLmNyZWF0ZSh0aHJlZSwgZm91cikgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoUG9zaXRpb24uaXMob25lKSAmJiBQb3NpdGlvbi5pcyh0d28pKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHN0YXJ0OiBvbmUsIGVuZDogdHdvIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSYW5nZSNjcmVhdGUgY2FsbGVkIHdpdGggaW52YWxpZCBhcmd1bWVudHNbXCIgKyBvbmUgKyBcIiwgXCIgKyB0d28gKyBcIiwgXCIgKyB0aHJlZSArIFwiLCBcIiArIGZvdXIgKyBcIl1cIik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgUmFuZ2UuY3JlYXRlID0gY3JlYXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW1JhbmdlXSgjUmFuZ2UpIGludGVyZmFjZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcclxuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKSAmJiBQb3NpdGlvbi5pcyhjYW5kaWRhdGUuc3RhcnQpICYmIFBvc2l0aW9uLmlzKGNhbmRpZGF0ZS5lbmQpO1xyXG4gICAgfVxyXG4gICAgUmFuZ2UuaXMgPSBpcztcclxufSkoUmFuZ2UgfHwgKFJhbmdlID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBMb2NhdGlvbiBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcclxuICogW0xvY2F0aW9uXSgjTG9jYXRpb24pIGxpdGVyYWxzLlxyXG4gKi9cclxuZXhwb3J0IHZhciBMb2NhdGlvbjtcclxuKGZ1bmN0aW9uIChMb2NhdGlvbikge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgTG9jYXRpb24gbGl0ZXJhbC5cclxuICAgICAqIEBwYXJhbSB1cmkgVGhlIGxvY2F0aW9uJ3MgdXJpLlxyXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSBsb2NhdGlvbidzIHJhbmdlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUodXJpLCByYW5nZSkge1xyXG4gICAgICAgIHJldHVybiB7IHVyaTogdXJpLCByYW5nZTogcmFuZ2UgfTtcclxuICAgIH1cclxuICAgIExvY2F0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIFtMb2NhdGlvbl0oI0xvY2F0aW9uKSBpbnRlcmZhY2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUudXJpKSk7XHJcbiAgICB9XHJcbiAgICBMb2NhdGlvbi5pcyA9IGlzO1xyXG59KShMb2NhdGlvbiB8fCAoTG9jYXRpb24gPSB7fSkpO1xyXG4vKipcclxuICogVGhlIExvY2F0aW9uTGluayBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcclxuICogW0xvY2F0aW9uTGlua10oI0xvY2F0aW9uTGluaykgbGl0ZXJhbHMuXHJcbiAqL1xyXG5leHBvcnQgdmFyIExvY2F0aW9uTGluaztcclxuKGZ1bmN0aW9uIChMb2NhdGlvbkxpbmspIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIExvY2F0aW9uTGluayBsaXRlcmFsLlxyXG4gICAgICogQHBhcmFtIHRhcmdldFVyaSBUaGUgZGVmaW5pdGlvbidzIHVyaS5cclxuICAgICAqIEBwYXJhbSB0YXJnZXRSYW5nZSBUaGUgZnVsbCByYW5nZSBvZiB0aGUgZGVmaW5pdGlvbi5cclxuICAgICAqIEBwYXJhbSB0YXJnZXRTZWxlY3Rpb25SYW5nZSBUaGUgc3BhbiBvZiB0aGUgc3ltYm9sIGRlZmluaXRpb24gYXQgdGhlIHRhcmdldC5cclxuICAgICAqIEBwYXJhbSBvcmlnaW5TZWxlY3Rpb25SYW5nZSBUaGUgc3BhbiBvZiB0aGUgc3ltYm9sIGJlaW5nIGRlZmluZWQgaW4gdGhlIG9yaWdpbmF0aW5nIHNvdXJjZSBmaWxlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUodGFyZ2V0VXJpLCB0YXJnZXRSYW5nZSwgdGFyZ2V0U2VsZWN0aW9uUmFuZ2UsIG9yaWdpblNlbGVjdGlvblJhbmdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgdGFyZ2V0VXJpOiB0YXJnZXRVcmksIHRhcmdldFJhbmdlOiB0YXJnZXRSYW5nZSwgdGFyZ2V0U2VsZWN0aW9uUmFuZ2U6IHRhcmdldFNlbGVjdGlvblJhbmdlLCBvcmlnaW5TZWxlY3Rpb25SYW5nZTogb3JpZ2luU2VsZWN0aW9uUmFuZ2UgfTtcclxuICAgIH1cclxuICAgIExvY2F0aW9uTGluay5jcmVhdGUgPSBjcmVhdGU7XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSBbTG9jYXRpb25MaW5rXSgjTG9jYXRpb25MaW5rKSBpbnRlcmZhY2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnRhcmdldFJhbmdlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnRhcmdldFVyaSlcclxuICAgICAgICAgICAgJiYgKFJhbmdlLmlzKGNhbmRpZGF0ZS50YXJnZXRTZWxlY3Rpb25SYW5nZSkgfHwgSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS50YXJnZXRTZWxlY3Rpb25SYW5nZSkpXHJcbiAgICAgICAgICAgICYmIChSYW5nZS5pcyhjYW5kaWRhdGUub3JpZ2luU2VsZWN0aW9uUmFuZ2UpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUub3JpZ2luU2VsZWN0aW9uUmFuZ2UpKTtcclxuICAgIH1cclxuICAgIExvY2F0aW9uTGluay5pcyA9IGlzO1xyXG59KShMb2NhdGlvbkxpbmsgfHwgKExvY2F0aW9uTGluayA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgQ29sb3IgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXHJcbiAqIFtDb2xvcl0oI0NvbG9yKSBsaXRlcmFscy5cclxuICovXHJcbmV4cG9ydCB2YXIgQ29sb3I7XHJcbihmdW5jdGlvbiAoQ29sb3IpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2xvciBsaXRlcmFsLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUocmVkLCBncmVlbiwgYmx1ZSwgYWxwaGEpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZWQ6IHJlZCxcclxuICAgICAgICAgICAgZ3JlZW46IGdyZWVuLFxyXG4gICAgICAgICAgICBibHVlOiBibHVlLFxyXG4gICAgICAgICAgICBhbHBoYTogYWxwaGEsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIENvbG9yLmNyZWF0ZSA9IGNyZWF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIFtDb2xvcl0oI0NvbG9yKSBpbnRlcmZhY2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBJcy5udW1iZXIoY2FuZGlkYXRlLnJlZClcclxuICAgICAgICAgICAgJiYgSXMubnVtYmVyKGNhbmRpZGF0ZS5ncmVlbilcclxuICAgICAgICAgICAgJiYgSXMubnVtYmVyKGNhbmRpZGF0ZS5ibHVlKVxyXG4gICAgICAgICAgICAmJiBJcy5udW1iZXIoY2FuZGlkYXRlLmFscGhhKTtcclxuICAgIH1cclxuICAgIENvbG9yLmlzID0gaXM7XHJcbn0pKENvbG9yIHx8IChDb2xvciA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgQ29sb3JJbmZvcm1hdGlvbiBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcclxuICogW0NvbG9ySW5mb3JtYXRpb25dKCNDb2xvckluZm9ybWF0aW9uKSBsaXRlcmFscy5cclxuICovXHJcbmV4cG9ydCB2YXIgQ29sb3JJbmZvcm1hdGlvbjtcclxuKGZ1bmN0aW9uIChDb2xvckluZm9ybWF0aW9uKSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29sb3JJbmZvcm1hdGlvbiBsaXRlcmFsLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIGNvbG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmFuZ2U6IHJhbmdlLFxyXG4gICAgICAgICAgICBjb2xvcjogY29sb3IsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIENvbG9ySW5mb3JtYXRpb24uY3JlYXRlID0gY3JlYXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW0NvbG9ySW5mb3JtYXRpb25dKCNDb2xvckluZm9ybWF0aW9uKSBpbnRlcmZhY2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBSYW5nZS5pcyhjYW5kaWRhdGUucmFuZ2UpICYmIENvbG9yLmlzKGNhbmRpZGF0ZS5jb2xvcik7XHJcbiAgICB9XHJcbiAgICBDb2xvckluZm9ybWF0aW9uLmlzID0gaXM7XHJcbn0pKENvbG9ySW5mb3JtYXRpb24gfHwgKENvbG9ySW5mb3JtYXRpb24gPSB7fSkpO1xyXG4vKipcclxuICogVGhlIENvbG9yIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxyXG4gKiBbQ29sb3JQcmVzZW50YXRpb25dKCNDb2xvclByZXNlbnRhdGlvbikgbGl0ZXJhbHMuXHJcbiAqL1xyXG5leHBvcnQgdmFyIENvbG9yUHJlc2VudGF0aW9uO1xyXG4oZnVuY3Rpb24gKENvbG9yUHJlc2VudGF0aW9uKSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29sb3JJbmZvcm1hdGlvbiBsaXRlcmFsLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUobGFiZWwsIHRleHRFZGl0LCBhZGRpdGlvbmFsVGV4dEVkaXRzKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbGFiZWw6IGxhYmVsLFxyXG4gICAgICAgICAgICB0ZXh0RWRpdDogdGV4dEVkaXQsXHJcbiAgICAgICAgICAgIGFkZGl0aW9uYWxUZXh0RWRpdHM6IGFkZGl0aW9uYWxUZXh0RWRpdHMsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIENvbG9yUHJlc2VudGF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIFtDb2xvckluZm9ybWF0aW9uXSgjQ29sb3JJbmZvcm1hdGlvbikgaW50ZXJmYWNlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xyXG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYWJlbClcclxuICAgICAgICAgICAgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUudGV4dEVkaXQpIHx8IFRleHRFZGl0LmlzKGNhbmRpZGF0ZSkpXHJcbiAgICAgICAgICAgICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmFkZGl0aW9uYWxUZXh0RWRpdHMpIHx8IElzLnR5cGVkQXJyYXkoY2FuZGlkYXRlLmFkZGl0aW9uYWxUZXh0RWRpdHMsIFRleHRFZGl0LmlzKSk7XHJcbiAgICB9XHJcbiAgICBDb2xvclByZXNlbnRhdGlvbi5pcyA9IGlzO1xyXG59KShDb2xvclByZXNlbnRhdGlvbiB8fCAoQ29sb3JQcmVzZW50YXRpb24gPSB7fSkpO1xyXG4vKipcclxuICogRW51bSBvZiBrbm93biByYW5nZSBraW5kc1xyXG4gKi9cclxuZXhwb3J0IHZhciBGb2xkaW5nUmFuZ2VLaW5kO1xyXG4oZnVuY3Rpb24gKEZvbGRpbmdSYW5nZUtpbmQpIHtcclxuICAgIC8qKlxyXG4gICAgICogRm9sZGluZyByYW5nZSBmb3IgYSBjb21tZW50XHJcbiAgICAgKi9cclxuICAgIEZvbGRpbmdSYW5nZUtpbmRbXCJDb21tZW50XCJdID0gXCJjb21tZW50XCI7XHJcbiAgICAvKipcclxuICAgICAqIEZvbGRpbmcgcmFuZ2UgZm9yIGEgaW1wb3J0cyBvciBpbmNsdWRlc1xyXG4gICAgICovXHJcbiAgICBGb2xkaW5nUmFuZ2VLaW5kW1wiSW1wb3J0c1wiXSA9IFwiaW1wb3J0c1wiO1xyXG4gICAgLyoqXHJcbiAgICAgKiBGb2xkaW5nIHJhbmdlIGZvciBhIHJlZ2lvbiAoZS5nLiBgI3JlZ2lvbmApXHJcbiAgICAgKi9cclxuICAgIEZvbGRpbmdSYW5nZUtpbmRbXCJSZWdpb25cIl0gPSBcInJlZ2lvblwiO1xyXG59KShGb2xkaW5nUmFuZ2VLaW5kIHx8IChGb2xkaW5nUmFuZ2VLaW5kID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBmb2xkaW5nIHJhbmdlIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxyXG4gKiBbRm9sZGluZ1JhbmdlXSgjRm9sZGluZ1JhbmdlKSBsaXRlcmFscy5cclxuICovXHJcbmV4cG9ydCB2YXIgRm9sZGluZ1JhbmdlO1xyXG4oZnVuY3Rpb24gKEZvbGRpbmdSYW5nZSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IEZvbGRpbmdSYW5nZSBsaXRlcmFsLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUoc3RhcnRMaW5lLCBlbmRMaW5lLCBzdGFydENoYXJhY3RlciwgZW5kQ2hhcmFjdGVyLCBraW5kKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgc3RhcnRMaW5lOiBzdGFydExpbmUsXHJcbiAgICAgICAgICAgIGVuZExpbmU6IGVuZExpbmVcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChJcy5kZWZpbmVkKHN0YXJ0Q2hhcmFjdGVyKSkge1xyXG4gICAgICAgICAgICByZXN1bHQuc3RhcnRDaGFyYWN0ZXIgPSBzdGFydENoYXJhY3RlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKElzLmRlZmluZWQoZW5kQ2hhcmFjdGVyKSkge1xyXG4gICAgICAgICAgICByZXN1bHQuZW5kQ2hhcmFjdGVyID0gZW5kQ2hhcmFjdGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoSXMuZGVmaW5lZChraW5kKSkge1xyXG4gICAgICAgICAgICByZXN1bHQua2luZCA9IGtpbmQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBGb2xkaW5nUmFuZ2UuY3JlYXRlID0gY3JlYXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW0ZvbGRpbmdSYW5nZV0oI0ZvbGRpbmdSYW5nZSkgaW50ZXJmYWNlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xyXG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gSXMubnVtYmVyKGNhbmRpZGF0ZS5zdGFydExpbmUpICYmIElzLm51bWJlcihjYW5kaWRhdGUuc3RhcnRMaW5lKVxyXG4gICAgICAgICAgICAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5zdGFydENoYXJhY3RlcikgfHwgSXMubnVtYmVyKGNhbmRpZGF0ZS5zdGFydENoYXJhY3RlcikpXHJcbiAgICAgICAgICAgICYmIChJcy51bmRlZmluZWQoY2FuZGlkYXRlLmVuZENoYXJhY3RlcikgfHwgSXMubnVtYmVyKGNhbmRpZGF0ZS5lbmRDaGFyYWN0ZXIpKVxyXG4gICAgICAgICAgICAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5raW5kKSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmtpbmQpKTtcclxuICAgIH1cclxuICAgIEZvbGRpbmdSYW5nZS5pcyA9IGlzO1xyXG59KShGb2xkaW5nUmFuZ2UgfHwgKEZvbGRpbmdSYW5nZSA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcclxuICogW0RpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb25dKCNEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uKSBsaXRlcmFscy5cclxuICovXHJcbmV4cG9ydCB2YXIgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbjtcclxuKGZ1bmN0aW9uIChEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uKSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbiBsaXRlcmFsLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUobG9jYXRpb24sIG1lc3NhZ2UpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXHJcbiAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2VcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbi5jcmVhdGUgPSBjcmVhdGU7XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSBbRGlhZ25vc3RpY1JlbGF0ZWRJbmZvcm1hdGlvbl0oI0RpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24pIGludGVyZmFjZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcclxuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBMb2NhdGlvbi5pcyhjYW5kaWRhdGUubG9jYXRpb24pICYmIElzLnN0cmluZyhjYW5kaWRhdGUubWVzc2FnZSk7XHJcbiAgICB9XHJcbiAgICBEaWFnbm9zdGljUmVsYXRlZEluZm9ybWF0aW9uLmlzID0gaXM7XHJcbn0pKERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24gfHwgKERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24gPSB7fSkpO1xyXG4vKipcclxuICogVGhlIGRpYWdub3N0aWMncyBzZXZlcml0eS5cclxuICovXHJcbmV4cG9ydCB2YXIgRGlhZ25vc3RpY1NldmVyaXR5O1xyXG4oZnVuY3Rpb24gKERpYWdub3N0aWNTZXZlcml0eSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXBvcnRzIGFuIGVycm9yLlxyXG4gICAgICovXHJcbiAgICBEaWFnbm9zdGljU2V2ZXJpdHkuRXJyb3IgPSAxO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXBvcnRzIGEgd2FybmluZy5cclxuICAgICAqL1xyXG4gICAgRGlhZ25vc3RpY1NldmVyaXR5Lldhcm5pbmcgPSAyO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXBvcnRzIGFuIGluZm9ybWF0aW9uLlxyXG4gICAgICovXHJcbiAgICBEaWFnbm9zdGljU2V2ZXJpdHkuSW5mb3JtYXRpb24gPSAzO1xyXG4gICAgLyoqXHJcbiAgICAgKiBSZXBvcnRzIGEgaGludC5cclxuICAgICAqL1xyXG4gICAgRGlhZ25vc3RpY1NldmVyaXR5LkhpbnQgPSA0O1xyXG59KShEaWFnbm9zdGljU2V2ZXJpdHkgfHwgKERpYWdub3N0aWNTZXZlcml0eSA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgRGlhZ25vc3RpYyBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcclxuICogW0RpYWdub3N0aWNdKCNEaWFnbm9zdGljKSBsaXRlcmFscy5cclxuICovXHJcbmV4cG9ydCB2YXIgRGlhZ25vc3RpYztcclxuKGZ1bmN0aW9uIChEaWFnbm9zdGljKSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgRGlhZ25vc3RpYyBsaXRlcmFsLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUocmFuZ2UsIG1lc3NhZ2UsIHNldmVyaXR5LCBjb2RlLCBzb3VyY2UsIHJlbGF0ZWRJbmZvcm1hdGlvbikge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB7IHJhbmdlOiByYW5nZSwgbWVzc2FnZTogbWVzc2FnZSB9O1xyXG4gICAgICAgIGlmIChJcy5kZWZpbmVkKHNldmVyaXR5KSkge1xyXG4gICAgICAgICAgICByZXN1bHQuc2V2ZXJpdHkgPSBzZXZlcml0eTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKElzLmRlZmluZWQoY29kZSkpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmNvZGUgPSBjb2RlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoSXMuZGVmaW5lZChzb3VyY2UpKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5zb3VyY2UgPSBzb3VyY2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChJcy5kZWZpbmVkKHJlbGF0ZWRJbmZvcm1hdGlvbikpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnJlbGF0ZWRJbmZvcm1hdGlvbiA9IHJlbGF0ZWRJbmZvcm1hdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIERpYWdub3N0aWMuY3JlYXRlID0gY3JlYXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW0RpYWdub3N0aWNdKCNEaWFnbm9zdGljKSBpbnRlcmZhY2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSlcclxuICAgICAgICAgICAgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKVxyXG4gICAgICAgICAgICAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm1lc3NhZ2UpXHJcbiAgICAgICAgICAgICYmIChJcy5udW1iZXIoY2FuZGlkYXRlLnNldmVyaXR5KSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLnNldmVyaXR5KSlcclxuICAgICAgICAgICAgJiYgKElzLm51bWJlcihjYW5kaWRhdGUuY29kZSkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5jb2RlKSB8fCBJcy51bmRlZmluZWQoY2FuZGlkYXRlLmNvZGUpKVxyXG4gICAgICAgICAgICAmJiAoSXMuc3RyaW5nKGNhbmRpZGF0ZS5zb3VyY2UpIHx8IElzLnVuZGVmaW5lZChjYW5kaWRhdGUuc291cmNlKSlcclxuICAgICAgICAgICAgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUucmVsYXRlZEluZm9ybWF0aW9uKSB8fCBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5yZWxhdGVkSW5mb3JtYXRpb24sIERpYWdub3N0aWNSZWxhdGVkSW5mb3JtYXRpb24uaXMpKTtcclxuICAgIH1cclxuICAgIERpYWdub3N0aWMuaXMgPSBpcztcclxufSkoRGlhZ25vc3RpYyB8fCAoRGlhZ25vc3RpYyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgQ29tbWFuZCBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcclxuICogW0NvbW1hbmRdKCNDb21tYW5kKSBsaXRlcmFscy5cclxuICovXHJcbmV4cG9ydCB2YXIgQ29tbWFuZDtcclxuKGZ1bmN0aW9uIChDb21tYW5kKSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29tbWFuZCBsaXRlcmFsLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUodGl0bGUsIGNvbW1hbmQpIHtcclxuICAgICAgICB2YXIgYXJncyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSB7IHRpdGxlOiB0aXRsZSwgY29tbWFuZDogY29tbWFuZCB9O1xyXG4gICAgICAgIGlmIChJcy5kZWZpbmVkKGFyZ3MpICYmIGFyZ3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICByZXN1bHQuYXJndW1lbnRzID0gYXJncztcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIENvbW1hbmQuY3JlYXRlID0gY3JlYXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW0NvbW1hbmRdKCNDb21tYW5kKSBpbnRlcmZhY2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS50aXRsZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS5jb21tYW5kKTtcclxuICAgIH1cclxuICAgIENvbW1hbmQuaXMgPSBpcztcclxufSkoQ29tbWFuZCB8fCAoQ29tbWFuZCA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgVGV4dEVkaXQgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGUgcmVwbGFjZSxcclxuICogaW5zZXJ0IGFuZCBkZWxldGUgZWRpdHMgbW9yZSBlYXNpbHkuXHJcbiAqL1xyXG5leHBvcnQgdmFyIFRleHRFZGl0O1xyXG4oZnVuY3Rpb24gKFRleHRFZGl0KSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSByZXBsYWNlIHRleHQgZWRpdC5cclxuICAgICAqIEBwYXJhbSByYW5nZSBUaGUgcmFuZ2Ugb2YgdGV4dCB0byBiZSByZXBsYWNlZC5cclxuICAgICAqIEBwYXJhbSBuZXdUZXh0IFRoZSBuZXcgdGV4dC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gcmVwbGFjZShyYW5nZSwgbmV3VGV4dCkge1xyXG4gICAgICAgIHJldHVybiB7IHJhbmdlOiByYW5nZSwgbmV3VGV4dDogbmV3VGV4dCB9O1xyXG4gICAgfVxyXG4gICAgVGV4dEVkaXQucmVwbGFjZSA9IHJlcGxhY2U7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBpbnNlcnQgdGV4dCBlZGl0LlxyXG4gICAgICogQHBhcmFtIHBvc2l0aW9uIFRoZSBwb3NpdGlvbiB0byBpbnNlcnQgdGhlIHRleHQgYXQuXHJcbiAgICAgKiBAcGFyYW0gbmV3VGV4dCBUaGUgdGV4dCB0byBiZSBpbnNlcnRlZC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaW5zZXJ0KHBvc2l0aW9uLCBuZXdUZXh0KSB7XHJcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2U6IHsgc3RhcnQ6IHBvc2l0aW9uLCBlbmQ6IHBvc2l0aW9uIH0sIG5ld1RleHQ6IG5ld1RleHQgfTtcclxuICAgIH1cclxuICAgIFRleHRFZGl0Lmluc2VydCA9IGluc2VydDtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIGRlbGV0ZSB0ZXh0IGVkaXQuXHJcbiAgICAgKiBAcGFyYW0gcmFuZ2UgVGhlIHJhbmdlIG9mIHRleHQgdG8gYmUgZGVsZXRlZC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZGVsKHJhbmdlKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgcmFuZ2U6IHJhbmdlLCBuZXdUZXh0OiAnJyB9O1xyXG4gICAgfVxyXG4gICAgVGV4dEVkaXQuZGVsID0gZGVsO1xyXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcclxuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIElzLm9iamVjdExpdGVyYWwoY2FuZGlkYXRlKVxyXG4gICAgICAgICAgICAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm5ld1RleHQpXHJcbiAgICAgICAgICAgICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSk7XHJcbiAgICB9XHJcbiAgICBUZXh0RWRpdC5pcyA9IGlzO1xyXG59KShUZXh0RWRpdCB8fCAoVGV4dEVkaXQgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIFRleHREb2N1bWVudEVkaXQgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbiB0byBjcmVhdGVcclxuICogYW4gZWRpdCB0aGF0IG1hbmlwdWxhdGVzIGEgdGV4dCBkb2N1bWVudC5cclxuICovXHJcbmV4cG9ydCB2YXIgVGV4dERvY3VtZW50RWRpdDtcclxuKGZ1bmN0aW9uIChUZXh0RG9jdW1lbnRFZGl0KSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgYFRleHREb2N1bWVudEVkaXRgXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZSh0ZXh0RG9jdW1lbnQsIGVkaXRzKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgdGV4dERvY3VtZW50OiB0ZXh0RG9jdW1lbnQsIGVkaXRzOiBlZGl0cyB9O1xyXG4gICAgfVxyXG4gICAgVGV4dERvY3VtZW50RWRpdC5jcmVhdGUgPSBjcmVhdGU7XHJcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xyXG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpXHJcbiAgICAgICAgICAgICYmIFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIuaXMoY2FuZGlkYXRlLnRleHREb2N1bWVudClcclxuICAgICAgICAgICAgJiYgQXJyYXkuaXNBcnJheShjYW5kaWRhdGUuZWRpdHMpO1xyXG4gICAgfVxyXG4gICAgVGV4dERvY3VtZW50RWRpdC5pcyA9IGlzO1xyXG59KShUZXh0RG9jdW1lbnRFZGl0IHx8IChUZXh0RG9jdW1lbnRFZGl0ID0ge30pKTtcclxuZXhwb3J0IHZhciBDcmVhdGVGaWxlO1xyXG4oZnVuY3Rpb24gKENyZWF0ZUZpbGUpIHtcclxuICAgIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICBraW5kOiAnY3JlYXRlJyxcclxuICAgICAgICAgICAgdXJpOiB1cmlcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChvcHRpb25zICE9PSB2b2lkIDAgJiYgKG9wdGlvbnMub3ZlcndyaXRlICE9PSB2b2lkIDAgfHwgb3B0aW9ucy5pZ25vcmVJZkV4aXN0cyAhPT0gdm9pZCAwKSkge1xyXG4gICAgICAgICAgICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBDcmVhdGVGaWxlLmNyZWF0ZSA9IGNyZWF0ZTtcclxuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgY2FuZGlkYXRlLmtpbmQgPT09ICdjcmVhdGUnICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJlxyXG4gICAgICAgICAgICAoY2FuZGlkYXRlLm9wdGlvbnMgPT09IHZvaWQgMCB8fFxyXG4gICAgICAgICAgICAgICAgKChjYW5kaWRhdGUub3B0aW9ucy5vdmVyd3JpdGUgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLm92ZXJ3cml0ZSkpICYmIChjYW5kaWRhdGUub3B0aW9ucy5pZ25vcmVJZkV4aXN0cyA9PT0gdm9pZCAwIHx8IElzLmJvb2xlYW4oY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZFeGlzdHMpKSkpO1xyXG4gICAgfVxyXG4gICAgQ3JlYXRlRmlsZS5pcyA9IGlzO1xyXG59KShDcmVhdGVGaWxlIHx8IChDcmVhdGVGaWxlID0ge30pKTtcclxuZXhwb3J0IHZhciBSZW5hbWVGaWxlO1xyXG4oZnVuY3Rpb24gKFJlbmFtZUZpbGUpIHtcclxuICAgIGZ1bmN0aW9uIGNyZWF0ZShvbGRVcmksIG5ld1VyaSwgb3B0aW9ucykge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgIGtpbmQ6ICdyZW5hbWUnLFxyXG4gICAgICAgICAgICBvbGRVcmk6IG9sZFVyaSxcclxuICAgICAgICAgICAgbmV3VXJpOiBuZXdVcmlcclxuICAgICAgICB9O1xyXG4gICAgICAgIGlmIChvcHRpb25zICE9PSB2b2lkIDAgJiYgKG9wdGlvbnMub3ZlcndyaXRlICE9PSB2b2lkIDAgfHwgb3B0aW9ucy5pZ25vcmVJZkV4aXN0cyAhPT0gdm9pZCAwKSkge1xyXG4gICAgICAgICAgICByZXN1bHQub3B0aW9ucyA9IG9wdGlvbnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICBSZW5hbWVGaWxlLmNyZWF0ZSA9IGNyZWF0ZTtcclxuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiYgY2FuZGlkYXRlLmtpbmQgPT09ICdyZW5hbWUnICYmIElzLnN0cmluZyhjYW5kaWRhdGUub2xkVXJpKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLm5ld1VyaSkgJiZcclxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5vcHRpb25zID09PSB2b2lkIDAgfHxcclxuICAgICAgICAgICAgICAgICgoY2FuZGlkYXRlLm9wdGlvbnMub3ZlcndyaXRlID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5vdmVyd3JpdGUpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZFeGlzdHMgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmRXhpc3RzKSkpKTtcclxuICAgIH1cclxuICAgIFJlbmFtZUZpbGUuaXMgPSBpcztcclxufSkoUmVuYW1lRmlsZSB8fCAoUmVuYW1lRmlsZSA9IHt9KSk7XHJcbmV4cG9ydCB2YXIgRGVsZXRlRmlsZTtcclxuKGZ1bmN0aW9uIChEZWxldGVGaWxlKSB7XHJcbiAgICBmdW5jdGlvbiBjcmVhdGUodXJpLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAga2luZDogJ2RlbGV0ZScsXHJcbiAgICAgICAgICAgIHVyaTogdXJpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAob3B0aW9ucyAhPT0gdm9pZCAwICYmIChvcHRpb25zLnJlY3Vyc2l2ZSAhPT0gdm9pZCAwIHx8IG9wdGlvbnMuaWdub3JlSWZOb3RFeGlzdHMgIT09IHZvaWQgMCkpIHtcclxuICAgICAgICAgICAgcmVzdWx0Lm9wdGlvbnMgPSBvcHRpb25zO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgRGVsZXRlRmlsZS5jcmVhdGUgPSBjcmVhdGU7XHJcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xyXG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmIGNhbmRpZGF0ZS5raW5kID09PSAnZGVsZXRlJyAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiZcclxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5vcHRpb25zID09PSB2b2lkIDAgfHxcclxuICAgICAgICAgICAgICAgICgoY2FuZGlkYXRlLm9wdGlvbnMucmVjdXJzaXZlID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUub3B0aW9ucy5yZWN1cnNpdmUpKSAmJiAoY2FuZGlkYXRlLm9wdGlvbnMuaWdub3JlSWZOb3RFeGlzdHMgPT09IHZvaWQgMCB8fCBJcy5ib29sZWFuKGNhbmRpZGF0ZS5vcHRpb25zLmlnbm9yZUlmTm90RXhpc3RzKSkpKTtcclxuICAgIH1cclxuICAgIERlbGV0ZUZpbGUuaXMgPSBpcztcclxufSkoRGVsZXRlRmlsZSB8fCAoRGVsZXRlRmlsZSA9IHt9KSk7XHJcbmV4cG9ydCB2YXIgV29ya3NwYWNlRWRpdDtcclxuKGZ1bmN0aW9uIChXb3Jrc3BhY2VFZGl0KSB7XHJcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xyXG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gY2FuZGlkYXRlICYmXHJcbiAgICAgICAgICAgIChjYW5kaWRhdGUuY2hhbmdlcyAhPT0gdm9pZCAwIHx8IGNhbmRpZGF0ZS5kb2N1bWVudENoYW5nZXMgIT09IHZvaWQgMCkgJiZcclxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5kb2N1bWVudENoYW5nZXMgPT09IHZvaWQgMCB8fCBjYW5kaWRhdGUuZG9jdW1lbnRDaGFuZ2VzLmV2ZXJ5KGZ1bmN0aW9uIChjaGFuZ2UpIHtcclxuICAgICAgICAgICAgICAgIGlmIChJcy5zdHJpbmcoY2hhbmdlLmtpbmQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENyZWF0ZUZpbGUuaXMoY2hhbmdlKSB8fCBSZW5hbWVGaWxlLmlzKGNoYW5nZSkgfHwgRGVsZXRlRmlsZS5pcyhjaGFuZ2UpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFRleHREb2N1bWVudEVkaXQuaXMoY2hhbmdlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSkpO1xyXG4gICAgfVxyXG4gICAgV29ya3NwYWNlRWRpdC5pcyA9IGlzO1xyXG59KShXb3Jrc3BhY2VFZGl0IHx8IChXb3Jrc3BhY2VFZGl0ID0ge30pKTtcclxudmFyIFRleHRFZGl0Q2hhbmdlSW1wbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFRleHRFZGl0Q2hhbmdlSW1wbChlZGl0cykge1xyXG4gICAgICAgIHRoaXMuZWRpdHMgPSBlZGl0cztcclxuICAgIH1cclxuICAgIFRleHRFZGl0Q2hhbmdlSW1wbC5wcm90b3R5cGUuaW5zZXJ0ID0gZnVuY3Rpb24gKHBvc2l0aW9uLCBuZXdUZXh0KSB7XHJcbiAgICAgICAgdGhpcy5lZGl0cy5wdXNoKFRleHRFZGl0Lmluc2VydChwb3NpdGlvbiwgbmV3VGV4dCkpO1xyXG4gICAgfTtcclxuICAgIFRleHRFZGl0Q2hhbmdlSW1wbC5wcm90b3R5cGUucmVwbGFjZSA9IGZ1bmN0aW9uIChyYW5nZSwgbmV3VGV4dCkge1xyXG4gICAgICAgIHRoaXMuZWRpdHMucHVzaChUZXh0RWRpdC5yZXBsYWNlKHJhbmdlLCBuZXdUZXh0KSk7XHJcbiAgICB9O1xyXG4gICAgVGV4dEVkaXRDaGFuZ2VJbXBsLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAocmFuZ2UpIHtcclxuICAgICAgICB0aGlzLmVkaXRzLnB1c2goVGV4dEVkaXQuZGVsKHJhbmdlKSk7XHJcbiAgICB9O1xyXG4gICAgVGV4dEVkaXRDaGFuZ2VJbXBsLnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiAoZWRpdCkge1xyXG4gICAgICAgIHRoaXMuZWRpdHMucHVzaChlZGl0KTtcclxuICAgIH07XHJcbiAgICBUZXh0RWRpdENoYW5nZUltcGwucHJvdG90eXBlLmFsbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5lZGl0cztcclxuICAgIH07XHJcbiAgICBUZXh0RWRpdENoYW5nZUltcGwucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuZWRpdHMuc3BsaWNlKDAsIHRoaXMuZWRpdHMubGVuZ3RoKTtcclxuICAgIH07XHJcbiAgICByZXR1cm4gVGV4dEVkaXRDaGFuZ2VJbXBsO1xyXG59KCkpO1xyXG4vKipcclxuICogQSB3b3Jrc3BhY2UgY2hhbmdlIGhlbHBzIGNvbnN0cnVjdGluZyBjaGFuZ2VzIHRvIGEgd29ya3NwYWNlLlxyXG4gKi9cclxudmFyIFdvcmtzcGFjZUNoYW5nZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIFdvcmtzcGFjZUNoYW5nZSh3b3Jrc3BhY2VFZGl0KSB7XHJcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICB0aGlzLl90ZXh0RWRpdENoYW5nZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xyXG4gICAgICAgIGlmICh3b3Jrc3BhY2VFZGl0KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQgPSB3b3Jrc3BhY2VFZGl0O1xyXG4gICAgICAgICAgICBpZiAod29ya3NwYWNlRWRpdC5kb2N1bWVudENoYW5nZXMpIHtcclxuICAgICAgICAgICAgICAgIHdvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzLmZvckVhY2goZnVuY3Rpb24gKGNoYW5nZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChUZXh0RG9jdW1lbnRFZGl0LmlzKGNoYW5nZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRleHRFZGl0Q2hhbmdlID0gbmV3IFRleHRFZGl0Q2hhbmdlSW1wbChjaGFuZ2UuZWRpdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdGV4dEVkaXRDaGFuZ2VzW2NoYW5nZS50ZXh0RG9jdW1lbnQudXJpXSA9IHRleHRFZGl0Q2hhbmdlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKHdvcmtzcGFjZUVkaXQuY2hhbmdlcykge1xyXG4gICAgICAgICAgICAgICAgT2JqZWN0LmtleXMod29ya3NwYWNlRWRpdC5jaGFuZ2VzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dEVkaXRDaGFuZ2UgPSBuZXcgVGV4dEVkaXRDaGFuZ2VJbXBsKHdvcmtzcGFjZUVkaXQuY2hhbmdlc1trZXldKTtcclxuICAgICAgICAgICAgICAgICAgICBfdGhpcy5fdGV4dEVkaXRDaGFuZ2VzW2tleV0gPSB0ZXh0RWRpdENoYW5nZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFdvcmtzcGFjZUNoYW5nZS5wcm90b3R5cGUsIFwiZWRpdFwiLCB7XHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogUmV0dXJucyB0aGUgdW5kZXJseWluZyBbV29ya3NwYWNlRWRpdF0oI1dvcmtzcGFjZUVkaXQpIGxpdGVyYWxcclxuICAgICAgICAgKiB1c2UgdG8gYmUgcmV0dXJuZWQgZnJvbSBhIHdvcmtzcGFjZSBlZGl0IG9wZXJhdGlvbiBsaWtlIHJlbmFtZS5cclxuICAgICAgICAgKi9cclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3dvcmtzcGFjZUVkaXQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBXb3Jrc3BhY2VDaGFuZ2UucHJvdG90eXBlLmdldFRleHRFZGl0Q2hhbmdlID0gZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIGlmIChWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyLmlzKGtleSkpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl93b3Jrc3BhY2VFZGl0KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50Q2hhbmdlczogW11cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcykge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXb3Jrc3BhY2UgZWRpdCBpcyBub3QgY29uZmlndXJlZCBmb3IgZG9jdW1lbnQgY2hhbmdlcy4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdGV4dERvY3VtZW50ID0ga2V5O1xyXG4gICAgICAgICAgICB2YXIgcmVzdWx0ID0gdGhpcy5fdGV4dEVkaXRDaGFuZ2VzW3RleHREb2N1bWVudC51cmldO1xyXG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVkaXRzID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgdGV4dERvY3VtZW50RWRpdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0RG9jdW1lbnQ6IHRleHREb2N1bWVudCxcclxuICAgICAgICAgICAgICAgICAgICBlZGl0czogZWRpdHNcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmRvY3VtZW50Q2hhbmdlcy5wdXNoKHRleHREb2N1bWVudEVkaXQpO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFRleHRFZGl0Q2hhbmdlSW1wbChlZGl0cyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXh0RWRpdENoYW5nZXNbdGV4dERvY3VtZW50LnVyaV0gPSByZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fd29ya3NwYWNlRWRpdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fd29ya3NwYWNlRWRpdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjaGFuZ2VzOiBPYmplY3QuY3JlYXRlKG51bGwpXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fd29ya3NwYWNlRWRpdC5jaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dvcmtzcGFjZSBlZGl0IGlzIG5vdCBjb25maWd1cmVkIGZvciBub3JtYWwgdGV4dCBlZGl0IGNoYW5nZXMuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHRoaXMuX3RleHRFZGl0Q2hhbmdlc1trZXldO1xyXG4gICAgICAgICAgICBpZiAoIXJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGVkaXRzID0gW107XHJcbiAgICAgICAgICAgICAgICB0aGlzLl93b3Jrc3BhY2VFZGl0LmNoYW5nZXNba2V5XSA9IGVkaXRzO1xyXG4gICAgICAgICAgICAgICAgcmVzdWx0ID0gbmV3IFRleHRFZGl0Q2hhbmdlSW1wbChlZGl0cyk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl90ZXh0RWRpdENoYW5nZXNba2V5XSA9IHJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBXb3Jrc3BhY2VDaGFuZ2UucHJvdG90eXBlLmNyZWF0ZUZpbGUgPSBmdW5jdGlvbiAodXJpLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0RvY3VtZW50Q2hhbmdlcygpO1xyXG4gICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzLnB1c2goQ3JlYXRlRmlsZS5jcmVhdGUodXJpLCBvcHRpb25zKSk7XHJcbiAgICB9O1xyXG4gICAgV29ya3NwYWNlQ2hhbmdlLnByb3RvdHlwZS5yZW5hbWVGaWxlID0gZnVuY3Rpb24gKG9sZFVyaSwgbmV3VXJpLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0RvY3VtZW50Q2hhbmdlcygpO1xyXG4gICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzLnB1c2goUmVuYW1lRmlsZS5jcmVhdGUob2xkVXJpLCBuZXdVcmksIG9wdGlvbnMpKTtcclxuICAgIH07XHJcbiAgICBXb3Jrc3BhY2VDaGFuZ2UucHJvdG90eXBlLmRlbGV0ZUZpbGUgPSBmdW5jdGlvbiAodXJpLCBvcHRpb25zKSB7XHJcbiAgICAgICAgdGhpcy5jaGVja0RvY3VtZW50Q2hhbmdlcygpO1xyXG4gICAgICAgIHRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzLnB1c2goRGVsZXRlRmlsZS5jcmVhdGUodXJpLCBvcHRpb25zKSk7XHJcbiAgICB9O1xyXG4gICAgV29ya3NwYWNlQ2hhbmdlLnByb3RvdHlwZS5jaGVja0RvY3VtZW50Q2hhbmdlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX3dvcmtzcGFjZUVkaXQgfHwgIXRoaXMuX3dvcmtzcGFjZUVkaXQuZG9jdW1lbnRDaGFuZ2VzKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV29ya3NwYWNlIGVkaXQgaXMgbm90IGNvbmZpZ3VyZWQgZm9yIGRvY3VtZW50IGNoYW5nZXMuJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHJldHVybiBXb3Jrc3BhY2VDaGFuZ2U7XHJcbn0oKSk7XHJcbmV4cG9ydCB7IFdvcmtzcGFjZUNoYW5nZSB9O1xyXG4vKipcclxuICogVGhlIFRleHREb2N1bWVudElkZW50aWZpZXIgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXHJcbiAqIFtUZXh0RG9jdW1lbnRJZGVudGlmaWVyXSgjVGV4dERvY3VtZW50SWRlbnRpZmllcikgbGl0ZXJhbHMuXHJcbiAqL1xyXG5leHBvcnQgdmFyIFRleHREb2N1bWVudElkZW50aWZpZXI7XHJcbihmdW5jdGlvbiAoVGV4dERvY3VtZW50SWRlbnRpZmllcikge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFRleHREb2N1bWVudElkZW50aWZpZXIgbGl0ZXJhbC5cclxuICAgICAqIEBwYXJhbSB1cmkgVGhlIGRvY3VtZW50J3MgdXJpLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUodXJpKSB7XHJcbiAgICAgICAgcmV0dXJuIHsgdXJpOiB1cmkgfTtcclxuICAgIH1cclxuICAgIFRleHREb2N1bWVudElkZW50aWZpZXIuY3JlYXRlID0gY3JlYXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW1RleHREb2N1bWVudElkZW50aWZpZXJdKCNUZXh0RG9jdW1lbnRJZGVudGlmaWVyKSBpbnRlcmZhY2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS51cmkpO1xyXG4gICAgfVxyXG4gICAgVGV4dERvY3VtZW50SWRlbnRpZmllci5pcyA9IGlzO1xyXG59KShUZXh0RG9jdW1lbnRJZGVudGlmaWVyIHx8IChUZXh0RG9jdW1lbnRJZGVudGlmaWVyID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxyXG4gKiBbVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcl0oI1ZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIpIGxpdGVyYWxzLlxyXG4gKi9cclxuZXhwb3J0IHZhciBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyO1xyXG4oZnVuY3Rpb24gKFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyIGxpdGVyYWwuXHJcbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cclxuICAgICAqIEBwYXJhbSB1cmkgVGhlIGRvY3VtZW50J3MgdGV4dC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgdmVyc2lvbikge1xyXG4gICAgICAgIHJldHVybiB7IHVyaTogdXJpLCB2ZXJzaW9uOiB2ZXJzaW9uIH07XHJcbiAgICB9XHJcbiAgICBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyLmNyZWF0ZSA9IGNyZWF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIFtWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyXSgjVmVyc2lvbmVkVGV4dERvY3VtZW50SWRlbnRpZmllcikgaW50ZXJmYWNlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xyXG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiAoY2FuZGlkYXRlLnZlcnNpb24gPT09IG51bGwgfHwgSXMubnVtYmVyKGNhbmRpZGF0ZS52ZXJzaW9uKSk7XHJcbiAgICB9XHJcbiAgICBWZXJzaW9uZWRUZXh0RG9jdW1lbnRJZGVudGlmaWVyLmlzID0gaXM7XHJcbn0pKFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgfHwgKFZlcnNpb25lZFRleHREb2N1bWVudElkZW50aWZpZXIgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIFRleHREb2N1bWVudEl0ZW0gbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXHJcbiAqIFtUZXh0RG9jdW1lbnRJdGVtXSgjVGV4dERvY3VtZW50SXRlbSkgbGl0ZXJhbHMuXHJcbiAqL1xyXG5leHBvcnQgdmFyIFRleHREb2N1bWVudEl0ZW07XHJcbihmdW5jdGlvbiAoVGV4dERvY3VtZW50SXRlbSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFRleHREb2N1bWVudEl0ZW0gbGl0ZXJhbC5cclxuICAgICAqIEBwYXJhbSB1cmkgVGhlIGRvY3VtZW50J3MgdXJpLlxyXG4gICAgICogQHBhcmFtIGxhbmd1YWdlSWQgVGhlIGRvY3VtZW50J3MgbGFuZ3VhZ2UgaWRlbnRpZmllci5cclxuICAgICAqIEBwYXJhbSB2ZXJzaW9uIFRoZSBkb2N1bWVudCdzIHZlcnNpb24gbnVtYmVyLlxyXG4gICAgICogQHBhcmFtIHRleHQgVGhlIGRvY3VtZW50J3MgdGV4dC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlKHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgdGV4dCkge1xyXG4gICAgICAgIHJldHVybiB7IHVyaTogdXJpLCBsYW5ndWFnZUlkOiBsYW5ndWFnZUlkLCB2ZXJzaW9uOiB2ZXJzaW9uLCB0ZXh0OiB0ZXh0IH07XHJcbiAgICB9XHJcbiAgICBUZXh0RG9jdW1lbnRJdGVtLmNyZWF0ZSA9IGNyZWF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIFtUZXh0RG9jdW1lbnRJdGVtXSgjVGV4dERvY3VtZW50SXRlbSkgaW50ZXJmYWNlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xyXG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudXJpKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLmxhbmd1YWdlSWQpICYmIElzLm51bWJlcihjYW5kaWRhdGUudmVyc2lvbikgJiYgSXMuc3RyaW5nKGNhbmRpZGF0ZS50ZXh0KTtcclxuICAgIH1cclxuICAgIFRleHREb2N1bWVudEl0ZW0uaXMgPSBpcztcclxufSkoVGV4dERvY3VtZW50SXRlbSB8fCAoVGV4dERvY3VtZW50SXRlbSA9IHt9KSk7XHJcbi8qKlxyXG4gKiBEZXNjcmliZXMgdGhlIGNvbnRlbnQgdHlwZSB0aGF0IGEgY2xpZW50IHN1cHBvcnRzIGluIHZhcmlvdXNcclxuICogcmVzdWx0IGxpdGVyYWxzIGxpa2UgYEhvdmVyYCwgYFBhcmFtZXRlckluZm9gIG9yIGBDb21wbGV0aW9uSXRlbWAuXHJcbiAqXHJcbiAqIFBsZWFzZSBub3RlIHRoYXQgYE1hcmt1cEtpbmRzYCBtdXN0IG5vdCBzdGFydCB3aXRoIGEgYCRgLiBUaGlzIGtpbmRzXHJcbiAqIGFyZSByZXNlcnZlZCBmb3IgaW50ZXJuYWwgdXNhZ2UuXHJcbiAqL1xyXG5leHBvcnQgdmFyIE1hcmt1cEtpbmQ7XHJcbihmdW5jdGlvbiAoTWFya3VwS2luZCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBQbGFpbiB0ZXh0IGlzIHN1cHBvcnRlZCBhcyBhIGNvbnRlbnQgZm9ybWF0XHJcbiAgICAgKi9cclxuICAgIE1hcmt1cEtpbmQuUGxhaW5UZXh0ID0gJ3BsYWludGV4dCc7XHJcbiAgICAvKipcclxuICAgICAqIE1hcmtkb3duIGlzIHN1cHBvcnRlZCBhcyBhIGNvbnRlbnQgZm9ybWF0XHJcbiAgICAgKi9cclxuICAgIE1hcmt1cEtpbmQuTWFya2Rvd24gPSAnbWFya2Rvd24nO1xyXG59KShNYXJrdXBLaW5kIHx8IChNYXJrdXBLaW5kID0ge30pKTtcclxuKGZ1bmN0aW9uIChNYXJrdXBLaW5kKSB7XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiB2YWx1ZSBpcyBhIHZhbHVlIG9mIHRoZSBbTWFya3VwS2luZF0oI01hcmt1cEtpbmQpIHR5cGUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgPT09IE1hcmt1cEtpbmQuUGxhaW5UZXh0IHx8IGNhbmRpZGF0ZSA9PT0gTWFya3VwS2luZC5NYXJrZG93bjtcclxuICAgIH1cclxuICAgIE1hcmt1cEtpbmQuaXMgPSBpcztcclxufSkoTWFya3VwS2luZCB8fCAoTWFya3VwS2luZCA9IHt9KSk7XHJcbmV4cG9ydCB2YXIgTWFya3VwQ29udGVudDtcclxuKGZ1bmN0aW9uIChNYXJrdXBDb250ZW50KSB7XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiB2YWx1ZSBjb25mb3JtcyB0byB0aGUgW01hcmt1cENvbnRlbnRdKCNNYXJrdXBDb250ZW50KSBpbnRlcmZhY2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBJcy5vYmplY3RMaXRlcmFsKHZhbHVlKSAmJiBNYXJrdXBLaW5kLmlzKGNhbmRpZGF0ZS5raW5kKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnZhbHVlKTtcclxuICAgIH1cclxuICAgIE1hcmt1cENvbnRlbnQuaXMgPSBpcztcclxufSkoTWFya3VwQ29udGVudCB8fCAoTWFya3VwQ29udGVudCA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUga2luZCBvZiBhIGNvbXBsZXRpb24gZW50cnkuXHJcbiAqL1xyXG5leHBvcnQgdmFyIENvbXBsZXRpb25JdGVtS2luZDtcclxuKGZ1bmN0aW9uIChDb21wbGV0aW9uSXRlbUtpbmQpIHtcclxuICAgIENvbXBsZXRpb25JdGVtS2luZC5UZXh0ID0gMTtcclxuICAgIENvbXBsZXRpb25JdGVtS2luZC5NZXRob2QgPSAyO1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLkZ1bmN0aW9uID0gMztcclxuICAgIENvbXBsZXRpb25JdGVtS2luZC5Db25zdHJ1Y3RvciA9IDQ7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRmllbGQgPSA1O1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlZhcmlhYmxlID0gNjtcclxuICAgIENvbXBsZXRpb25JdGVtS2luZC5DbGFzcyA9IDc7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuSW50ZXJmYWNlID0gODtcclxuICAgIENvbXBsZXRpb25JdGVtS2luZC5Nb2R1bGUgPSA5O1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlByb3BlcnR5ID0gMTA7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuVW5pdCA9IDExO1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlZhbHVlID0gMTI7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRW51bSA9IDEzO1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQgPSAxNDtcclxuICAgIENvbXBsZXRpb25JdGVtS2luZC5TbmlwcGV0ID0gMTU7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuQ29sb3IgPSAxNjtcclxuICAgIENvbXBsZXRpb25JdGVtS2luZC5GaWxlID0gMTc7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuUmVmZXJlbmNlID0gMTg7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRm9sZGVyID0gMTk7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRW51bU1lbWJlciA9IDIwO1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLkNvbnN0YW50ID0gMjE7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuU3RydWN0ID0gMjI7XHJcbiAgICBDb21wbGV0aW9uSXRlbUtpbmQuRXZlbnQgPSAyMztcclxuICAgIENvbXBsZXRpb25JdGVtS2luZC5PcGVyYXRvciA9IDI0O1xyXG4gICAgQ29tcGxldGlvbkl0ZW1LaW5kLlR5cGVQYXJhbWV0ZXIgPSAyNTtcclxufSkoQ29tcGxldGlvbkl0ZW1LaW5kIHx8IChDb21wbGV0aW9uSXRlbUtpbmQgPSB7fSkpO1xyXG4vKipcclxuICogRGVmaW5lcyB3aGV0aGVyIHRoZSBpbnNlcnQgdGV4dCBpbiBhIGNvbXBsZXRpb24gaXRlbSBzaG91bGQgYmUgaW50ZXJwcmV0ZWQgYXNcclxuICogcGxhaW4gdGV4dCBvciBhIHNuaXBwZXQuXHJcbiAqL1xyXG5leHBvcnQgdmFyIEluc2VydFRleHRGb3JtYXQ7XHJcbihmdW5jdGlvbiAoSW5zZXJ0VGV4dEZvcm1hdCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBUaGUgcHJpbWFyeSB0ZXh0IHRvIGJlIGluc2VydGVkIGlzIHRyZWF0ZWQgYXMgYSBwbGFpbiBzdHJpbmcuXHJcbiAgICAgKi9cclxuICAgIEluc2VydFRleHRGb3JtYXQuUGxhaW5UZXh0ID0gMTtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIHByaW1hcnkgdGV4dCB0byBiZSBpbnNlcnRlZCBpcyB0cmVhdGVkIGFzIGEgc25pcHBldC5cclxuICAgICAqXHJcbiAgICAgKiBBIHNuaXBwZXQgY2FuIGRlZmluZSB0YWIgc3RvcHMgYW5kIHBsYWNlaG9sZGVycyB3aXRoIGAkMWAsIGAkMmBcclxuICAgICAqIGFuZCBgJHszOmZvb31gLiBgJDBgIGRlZmluZXMgdGhlIGZpbmFsIHRhYiBzdG9wLCBpdCBkZWZhdWx0cyB0b1xyXG4gICAgICogdGhlIGVuZCBvZiB0aGUgc25pcHBldC4gUGxhY2Vob2xkZXJzIHdpdGggZXF1YWwgaWRlbnRpZmllcnMgYXJlIGxpbmtlZCxcclxuICAgICAqIHRoYXQgaXMgdHlwaW5nIGluIG9uZSB3aWxsIHVwZGF0ZSBvdGhlcnMgdG9vLlxyXG4gICAgICpcclxuICAgICAqIFNlZSBhbHNvOiBodHRwczovL2dpdGh1Yi5jb20vTWljcm9zb2Z0L3ZzY29kZS9ibG9iL21hc3Rlci9zcmMvdnMvZWRpdG9yL2NvbnRyaWIvc25pcHBldC9jb21tb24vc25pcHBldC5tZFxyXG4gICAgICovXHJcbiAgICBJbnNlcnRUZXh0Rm9ybWF0LlNuaXBwZXQgPSAyO1xyXG59KShJbnNlcnRUZXh0Rm9ybWF0IHx8IChJbnNlcnRUZXh0Rm9ybWF0ID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBDb21wbGV0aW9uSXRlbSBuYW1lc3BhY2UgcHJvdmlkZXMgZnVuY3Rpb25zIHRvIGRlYWwgd2l0aFxyXG4gKiBjb21wbGV0aW9uIGl0ZW1zLlxyXG4gKi9cclxuZXhwb3J0IHZhciBDb21wbGV0aW9uSXRlbTtcclxuKGZ1bmN0aW9uIChDb21wbGV0aW9uSXRlbSkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGUgYSBjb21wbGV0aW9uIGl0ZW0gYW5kIHNlZWQgaXQgd2l0aCBhIGxhYmVsLlxyXG4gICAgICogQHBhcmFtIGxhYmVsIFRoZSBjb21wbGV0aW9uIGl0ZW0ncyBsYWJlbFxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUobGFiZWwpIHtcclxuICAgICAgICByZXR1cm4geyBsYWJlbDogbGFiZWwgfTtcclxuICAgIH1cclxuICAgIENvbXBsZXRpb25JdGVtLmNyZWF0ZSA9IGNyZWF0ZTtcclxufSkoQ29tcGxldGlvbkl0ZW0gfHwgKENvbXBsZXRpb25JdGVtID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBDb21wbGV0aW9uTGlzdCBuYW1lc3BhY2UgcHJvdmlkZXMgZnVuY3Rpb25zIHRvIGRlYWwgd2l0aFxyXG4gKiBjb21wbGV0aW9uIGxpc3RzLlxyXG4gKi9cclxuZXhwb3J0IHZhciBDb21wbGV0aW9uTGlzdDtcclxuKGZ1bmN0aW9uIChDb21wbGV0aW9uTGlzdCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IGNvbXBsZXRpb24gbGlzdC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gaXRlbXMgVGhlIGNvbXBsZXRpb24gaXRlbXMuXHJcbiAgICAgKiBAcGFyYW0gaXNJbmNvbXBsZXRlIFRoZSBsaXN0IGlzIG5vdCBjb21wbGV0ZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlKGl0ZW1zLCBpc0luY29tcGxldGUpIHtcclxuICAgICAgICByZXR1cm4geyBpdGVtczogaXRlbXMgPyBpdGVtcyA6IFtdLCBpc0luY29tcGxldGU6ICEhaXNJbmNvbXBsZXRlIH07XHJcbiAgICB9XHJcbiAgICBDb21wbGV0aW9uTGlzdC5jcmVhdGUgPSBjcmVhdGU7XHJcbn0pKENvbXBsZXRpb25MaXN0IHx8IChDb21wbGV0aW9uTGlzdCA9IHt9KSk7XHJcbmV4cG9ydCB2YXIgTWFya2VkU3RyaW5nO1xyXG4oZnVuY3Rpb24gKE1hcmtlZFN0cmluZykge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbWFya2VkIHN0cmluZyBmcm9tIHBsYWluIHRleHQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHBsYWluVGV4dCBUaGUgcGxhaW4gdGV4dC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gZnJvbVBsYWluVGV4dChwbGFpblRleHQpIHtcclxuICAgICAgICByZXR1cm4gcGxhaW5UZXh0LnJlcGxhY2UoL1tcXFxcYCpfe31bXFxdKCkjK1xcLS4hXS9nLCBcIlxcXFwkJlwiKTsgLy8gZXNjYXBlIG1hcmtkb3duIHN5bnRheCB0b2tlbnM6IGh0dHA6Ly9kYXJpbmdmaXJlYmFsbC5uZXQvcHJvamVjdHMvbWFya2Rvd24vc3ludGF4I2JhY2tzbGFzaFxyXG4gICAgfVxyXG4gICAgTWFya2VkU3RyaW5nLmZyb21QbGFpblRleHQgPSBmcm9tUGxhaW5UZXh0O1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gdmFsdWUgY29uZm9ybXMgdG8gdGhlIFtNYXJrZWRTdHJpbmddKCNNYXJrZWRTdHJpbmcpIHR5cGUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBJcy5zdHJpbmcoY2FuZGlkYXRlKSB8fCAoSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIElzLnN0cmluZyhjYW5kaWRhdGUubGFuZ3VhZ2UpICYmIElzLnN0cmluZyhjYW5kaWRhdGUudmFsdWUpKTtcclxuICAgIH1cclxuICAgIE1hcmtlZFN0cmluZy5pcyA9IGlzO1xyXG59KShNYXJrZWRTdHJpbmcgfHwgKE1hcmtlZFN0cmluZyA9IHt9KSk7XHJcbmV4cG9ydCB2YXIgSG92ZXI7XHJcbihmdW5jdGlvbiAoSG92ZXIpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIHZhbHVlIGNvbmZvcm1zIHRvIHRoZSBbSG92ZXJdKCNIb3ZlcikgaW50ZXJmYWNlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xyXG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gISFjYW5kaWRhdGUgJiYgSXMub2JqZWN0TGl0ZXJhbChjYW5kaWRhdGUpICYmIChNYXJrdXBDb250ZW50LmlzKGNhbmRpZGF0ZS5jb250ZW50cykgfHxcclxuICAgICAgICAgICAgTWFya2VkU3RyaW5nLmlzKGNhbmRpZGF0ZS5jb250ZW50cykgfHxcclxuICAgICAgICAgICAgSXMudHlwZWRBcnJheShjYW5kaWRhdGUuY29udGVudHMsIE1hcmtlZFN0cmluZy5pcykpICYmICh2YWx1ZS5yYW5nZSA9PT0gdm9pZCAwIHx8IFJhbmdlLmlzKHZhbHVlLnJhbmdlKSk7XHJcbiAgICB9XHJcbiAgICBIb3Zlci5pcyA9IGlzO1xyXG59KShIb3ZlciB8fCAoSG92ZXIgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIFBhcmFtZXRlckluZm9ybWF0aW9uIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxyXG4gKiBbUGFyYW1ldGVySW5mb3JtYXRpb25dKCNQYXJhbWV0ZXJJbmZvcm1hdGlvbikgbGl0ZXJhbHMuXHJcbiAqL1xyXG5leHBvcnQgdmFyIFBhcmFtZXRlckluZm9ybWF0aW9uO1xyXG4oZnVuY3Rpb24gKFBhcmFtZXRlckluZm9ybWF0aW9uKSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgcGFyYW1ldGVyIGluZm9ybWF0aW9uIGxpdGVyYWwuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGxhYmVsIEEgbGFiZWwgc3RyaW5nLlxyXG4gICAgICogQHBhcmFtIGRvY3VtZW50YXRpb24gQSBkb2Mgc3RyaW5nLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUobGFiZWwsIGRvY3VtZW50YXRpb24pIHtcclxuICAgICAgICByZXR1cm4gZG9jdW1lbnRhdGlvbiA/IHsgbGFiZWw6IGxhYmVsLCBkb2N1bWVudGF0aW9uOiBkb2N1bWVudGF0aW9uIH0gOiB7IGxhYmVsOiBsYWJlbCB9O1xyXG4gICAgfVxyXG4gICAgUGFyYW1ldGVySW5mb3JtYXRpb24uY3JlYXRlID0gY3JlYXRlO1xyXG4gICAgO1xyXG59KShQYXJhbWV0ZXJJbmZvcm1hdGlvbiB8fCAoUGFyYW1ldGVySW5mb3JtYXRpb24gPSB7fSkpO1xyXG4vKipcclxuICogVGhlIFNpZ25hdHVyZUluZm9ybWF0aW9uIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxyXG4gKiBbU2lnbmF0dXJlSW5mb3JtYXRpb25dKCNTaWduYXR1cmVJbmZvcm1hdGlvbikgbGl0ZXJhbHMuXHJcbiAqL1xyXG5leHBvcnQgdmFyIFNpZ25hdHVyZUluZm9ybWF0aW9uO1xyXG4oZnVuY3Rpb24gKFNpZ25hdHVyZUluZm9ybWF0aW9uKSB7XHJcbiAgICBmdW5jdGlvbiBjcmVhdGUobGFiZWwsIGRvY3VtZW50YXRpb24pIHtcclxuICAgICAgICB2YXIgcGFyYW1ldGVycyA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIF9pID0gMjsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XHJcbiAgICAgICAgICAgIHBhcmFtZXRlcnNbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciByZXN1bHQgPSB7IGxhYmVsOiBsYWJlbCB9O1xyXG4gICAgICAgIGlmIChJcy5kZWZpbmVkKGRvY3VtZW50YXRpb24pKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5kb2N1bWVudGF0aW9uID0gZG9jdW1lbnRhdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKElzLmRlZmluZWQocGFyYW1ldGVycykpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0LnBhcmFtZXRlcnMgPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIFNpZ25hdHVyZUluZm9ybWF0aW9uLmNyZWF0ZSA9IGNyZWF0ZTtcclxufSkoU2lnbmF0dXJlSW5mb3JtYXRpb24gfHwgKFNpZ25hdHVyZUluZm9ybWF0aW9uID0ge30pKTtcclxuLyoqXHJcbiAqIEEgZG9jdW1lbnQgaGlnaGxpZ2h0IGtpbmQuXHJcbiAqL1xyXG5leHBvcnQgdmFyIERvY3VtZW50SGlnaGxpZ2h0S2luZDtcclxuKGZ1bmN0aW9uIChEb2N1bWVudEhpZ2hsaWdodEtpbmQpIHtcclxuICAgIC8qKlxyXG4gICAgICogQSB0ZXh0dWFsIG9jY3VycmVuY2UuXHJcbiAgICAgKi9cclxuICAgIERvY3VtZW50SGlnaGxpZ2h0S2luZC5UZXh0ID0gMTtcclxuICAgIC8qKlxyXG4gICAgICogUmVhZC1hY2Nlc3Mgb2YgYSBzeW1ib2wsIGxpa2UgcmVhZGluZyBhIHZhcmlhYmxlLlxyXG4gICAgICovXHJcbiAgICBEb2N1bWVudEhpZ2hsaWdodEtpbmQuUmVhZCA9IDI7XHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlLWFjY2VzcyBvZiBhIHN5bWJvbCwgbGlrZSB3cml0aW5nIHRvIGEgdmFyaWFibGUuXHJcbiAgICAgKi9cclxuICAgIERvY3VtZW50SGlnaGxpZ2h0S2luZC5Xcml0ZSA9IDM7XHJcbn0pKERvY3VtZW50SGlnaGxpZ2h0S2luZCB8fCAoRG9jdW1lbnRIaWdobGlnaHRLaW5kID0ge30pKTtcclxuLyoqXHJcbiAqIERvY3VtZW50SGlnaGxpZ2h0IG5hbWVzcGFjZSB0byBwcm92aWRlIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXHJcbiAqIFtEb2N1bWVudEhpZ2hsaWdodF0oI0RvY3VtZW50SGlnaGxpZ2h0KSBsaXRlcmFscy5cclxuICovXHJcbmV4cG9ydCB2YXIgRG9jdW1lbnRIaWdobGlnaHQ7XHJcbihmdW5jdGlvbiAoRG9jdW1lbnRIaWdobGlnaHQpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlIGEgRG9jdW1lbnRIaWdobGlnaHQgb2JqZWN0LlxyXG4gICAgICogQHBhcmFtIHJhbmdlIFRoZSByYW5nZSB0aGUgaGlnaGxpZ2h0IGFwcGxpZXMgdG8uXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwga2luZCkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB7IHJhbmdlOiByYW5nZSB9O1xyXG4gICAgICAgIGlmIChJcy5udW1iZXIoa2luZCkpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmtpbmQgPSBraW5kO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgRG9jdW1lbnRIaWdobGlnaHQuY3JlYXRlID0gY3JlYXRlO1xyXG59KShEb2N1bWVudEhpZ2hsaWdodCB8fCAoRG9jdW1lbnRIaWdobGlnaHQgPSB7fSkpO1xyXG4vKipcclxuICogQSBzeW1ib2wga2luZC5cclxuICovXHJcbmV4cG9ydCB2YXIgU3ltYm9sS2luZDtcclxuKGZ1bmN0aW9uIChTeW1ib2xLaW5kKSB7XHJcbiAgICBTeW1ib2xLaW5kLkZpbGUgPSAxO1xyXG4gICAgU3ltYm9sS2luZC5Nb2R1bGUgPSAyO1xyXG4gICAgU3ltYm9sS2luZC5OYW1lc3BhY2UgPSAzO1xyXG4gICAgU3ltYm9sS2luZC5QYWNrYWdlID0gNDtcclxuICAgIFN5bWJvbEtpbmQuQ2xhc3MgPSA1O1xyXG4gICAgU3ltYm9sS2luZC5NZXRob2QgPSA2O1xyXG4gICAgU3ltYm9sS2luZC5Qcm9wZXJ0eSA9IDc7XHJcbiAgICBTeW1ib2xLaW5kLkZpZWxkID0gODtcclxuICAgIFN5bWJvbEtpbmQuQ29uc3RydWN0b3IgPSA5O1xyXG4gICAgU3ltYm9sS2luZC5FbnVtID0gMTA7XHJcbiAgICBTeW1ib2xLaW5kLkludGVyZmFjZSA9IDExO1xyXG4gICAgU3ltYm9sS2luZC5GdW5jdGlvbiA9IDEyO1xyXG4gICAgU3ltYm9sS2luZC5WYXJpYWJsZSA9IDEzO1xyXG4gICAgU3ltYm9sS2luZC5Db25zdGFudCA9IDE0O1xyXG4gICAgU3ltYm9sS2luZC5TdHJpbmcgPSAxNTtcclxuICAgIFN5bWJvbEtpbmQuTnVtYmVyID0gMTY7XHJcbiAgICBTeW1ib2xLaW5kLkJvb2xlYW4gPSAxNztcclxuICAgIFN5bWJvbEtpbmQuQXJyYXkgPSAxODtcclxuICAgIFN5bWJvbEtpbmQuT2JqZWN0ID0gMTk7XHJcbiAgICBTeW1ib2xLaW5kLktleSA9IDIwO1xyXG4gICAgU3ltYm9sS2luZC5OdWxsID0gMjE7XHJcbiAgICBTeW1ib2xLaW5kLkVudW1NZW1iZXIgPSAyMjtcclxuICAgIFN5bWJvbEtpbmQuU3RydWN0ID0gMjM7XHJcbiAgICBTeW1ib2xLaW5kLkV2ZW50ID0gMjQ7XHJcbiAgICBTeW1ib2xLaW5kLk9wZXJhdG9yID0gMjU7XHJcbiAgICBTeW1ib2xLaW5kLlR5cGVQYXJhbWV0ZXIgPSAyNjtcclxufSkoU3ltYm9sS2luZCB8fCAoU3ltYm9sS2luZCA9IHt9KSk7XHJcbmV4cG9ydCB2YXIgU3ltYm9sSW5mb3JtYXRpb247XHJcbihmdW5jdGlvbiAoU3ltYm9sSW5mb3JtYXRpb24pIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBzeW1ib2wgaW5mb3JtYXRpb24gbGl0ZXJhbC5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gbmFtZSBUaGUgbmFtZSBvZiB0aGUgc3ltYm9sLlxyXG4gICAgICogQHBhcmFtIGtpbmQgVGhlIGtpbmQgb2YgdGhlIHN5bWJvbC5cclxuICAgICAqIEBwYXJhbSByYW5nZSBUaGUgcmFuZ2Ugb2YgdGhlIGxvY2F0aW9uIG9mIHRoZSBzeW1ib2wuXHJcbiAgICAgKiBAcGFyYW0gdXJpIFRoZSByZXNvdXJjZSBvZiB0aGUgbG9jYXRpb24gb2Ygc3ltYm9sLCBkZWZhdWx0cyB0byB0aGUgY3VycmVudCBkb2N1bWVudC5cclxuICAgICAqIEBwYXJhbSBjb250YWluZXJOYW1lIFRoZSBuYW1lIG9mIHRoZSBzeW1ib2wgY29udGFpbmluZyB0aGUgc3ltYm9sLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUobmFtZSwga2luZCwgcmFuZ2UsIHVyaSwgY29udGFpbmVyTmFtZSkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB7XHJcbiAgICAgICAgICAgIG5hbWU6IG5hbWUsXHJcbiAgICAgICAgICAgIGtpbmQ6IGtpbmQsXHJcbiAgICAgICAgICAgIGxvY2F0aW9uOiB7IHVyaTogdXJpLCByYW5nZTogcmFuZ2UgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKGNvbnRhaW5lck5hbWUpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmNvbnRhaW5lck5hbWUgPSBjb250YWluZXJOYW1lO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgU3ltYm9sSW5mb3JtYXRpb24uY3JlYXRlID0gY3JlYXRlO1xyXG59KShTeW1ib2xJbmZvcm1hdGlvbiB8fCAoU3ltYm9sSW5mb3JtYXRpb24gPSB7fSkpO1xyXG4vKipcclxuICogUmVwcmVzZW50cyBwcm9ncmFtbWluZyBjb25zdHJ1Y3RzIGxpa2UgdmFyaWFibGVzLCBjbGFzc2VzLCBpbnRlcmZhY2VzIGV0Yy5cclxuICogdGhhdCBhcHBlYXIgaW4gYSBkb2N1bWVudC4gRG9jdW1lbnQgc3ltYm9scyBjYW4gYmUgaGllcmFyY2hpY2FsIGFuZCB0aGV5XHJcbiAqIGhhdmUgdHdvIHJhbmdlczogb25lIHRoYXQgZW5jbG9zZXMgaXRzIGRlZmluaXRpb24gYW5kIG9uZSB0aGF0IHBvaW50cyB0b1xyXG4gKiBpdHMgbW9zdCBpbnRlcmVzdGluZyByYW5nZSwgZS5nLiB0aGUgcmFuZ2Ugb2YgYW4gaWRlbnRpZmllci5cclxuICovXHJcbnZhciBEb2N1bWVudFN5bWJvbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgIGZ1bmN0aW9uIERvY3VtZW50U3ltYm9sKCkge1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIERvY3VtZW50U3ltYm9sO1xyXG59KCkpO1xyXG5leHBvcnQgeyBEb2N1bWVudFN5bWJvbCB9O1xyXG4oZnVuY3Rpb24gKERvY3VtZW50U3ltYm9sKSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgc3ltYm9sIGluZm9ybWF0aW9uIGxpdGVyYWwuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIG5hbWUgVGhlIG5hbWUgb2YgdGhlIHN5bWJvbC5cclxuICAgICAqIEBwYXJhbSBkZXRhaWwgVGhlIGRldGFpbCBvZiB0aGUgc3ltYm9sLlxyXG4gICAgICogQHBhcmFtIGtpbmQgVGhlIGtpbmQgb2YgdGhlIHN5bWJvbC5cclxuICAgICAqIEBwYXJhbSByYW5nZSBUaGUgcmFuZ2Ugb2YgdGhlIHN5bWJvbC5cclxuICAgICAqIEBwYXJhbSBzZWxlY3Rpb25SYW5nZSBUaGUgc2VsZWN0aW9uUmFuZ2Ugb2YgdGhlIHN5bWJvbC5cclxuICAgICAqIEBwYXJhbSBjaGlsZHJlbiBDaGlsZHJlbiBvZiB0aGUgc3ltYm9sLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUobmFtZSwgZGV0YWlsLCBraW5kLCByYW5nZSwgc2VsZWN0aW9uUmFuZ2UsIGNoaWxkcmVuKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICAgICAgZGV0YWlsOiBkZXRhaWwsXHJcbiAgICAgICAgICAgIGtpbmQ6IGtpbmQsXHJcbiAgICAgICAgICAgIHJhbmdlOiByYW5nZSxcclxuICAgICAgICAgICAgc2VsZWN0aW9uUmFuZ2U6IHNlbGVjdGlvblJhbmdlXHJcbiAgICAgICAgfTtcclxuICAgICAgICBpZiAoY2hpbGRyZW4gIT09IHZvaWQgMCkge1xyXG4gICAgICAgICAgICByZXN1bHQuY2hpbGRyZW4gPSBjaGlsZHJlbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIERvY3VtZW50U3ltYm9sLmNyZWF0ZSA9IGNyZWF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIFtEb2N1bWVudFN5bWJvbF0oI0RvY3VtZW50U3ltYm9sKSBpbnRlcmZhY2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBjYW5kaWRhdGUgJiZcclxuICAgICAgICAgICAgSXMuc3RyaW5nKGNhbmRpZGF0ZS5uYW1lKSAmJiBJcy5udW1iZXIoY2FuZGlkYXRlLmtpbmQpICYmXHJcbiAgICAgICAgICAgIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnNlbGVjdGlvblJhbmdlKSAmJlxyXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmRldGFpbCA9PT0gdm9pZCAwIHx8IElzLnN0cmluZyhjYW5kaWRhdGUuZGV0YWlsKSkgJiZcclxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5kZXByZWNhdGVkID09PSB2b2lkIDAgfHwgSXMuYm9vbGVhbihjYW5kaWRhdGUuZGVwcmVjYXRlZCkpICYmXHJcbiAgICAgICAgICAgIChjYW5kaWRhdGUuY2hpbGRyZW4gPT09IHZvaWQgMCB8fCBBcnJheS5pc0FycmF5KGNhbmRpZGF0ZS5jaGlsZHJlbikpO1xyXG4gICAgfVxyXG4gICAgRG9jdW1lbnRTeW1ib2wuaXMgPSBpcztcclxufSkoRG9jdW1lbnRTeW1ib2wgfHwgKERvY3VtZW50U3ltYm9sID0ge30pKTtcclxuLyoqXHJcbiAqIEEgc2V0IG9mIHByZWRlZmluZWQgY29kZSBhY3Rpb24ga2luZHNcclxuICovXHJcbmV4cG9ydCB2YXIgQ29kZUFjdGlvbktpbmQ7XHJcbihmdW5jdGlvbiAoQ29kZUFjdGlvbktpbmQpIHtcclxuICAgIC8qKlxyXG4gICAgICogQmFzZSBraW5kIGZvciBxdWlja2ZpeCBhY3Rpb25zOiAncXVpY2tmaXgnXHJcbiAgICAgKi9cclxuICAgIENvZGVBY3Rpb25LaW5kLlF1aWNrRml4ID0gJ3F1aWNrZml4JztcclxuICAgIC8qKlxyXG4gICAgICogQmFzZSBraW5kIGZvciByZWZhY3RvcmluZyBhY3Rpb25zOiAncmVmYWN0b3InXHJcbiAgICAgKi9cclxuICAgIENvZGVBY3Rpb25LaW5kLlJlZmFjdG9yID0gJ3JlZmFjdG9yJztcclxuICAgIC8qKlxyXG4gICAgICogQmFzZSBraW5kIGZvciByZWZhY3RvcmluZyBleHRyYWN0aW9uIGFjdGlvbnM6ICdyZWZhY3Rvci5leHRyYWN0J1xyXG4gICAgICpcclxuICAgICAqIEV4YW1wbGUgZXh0cmFjdCBhY3Rpb25zOlxyXG4gICAgICpcclxuICAgICAqIC0gRXh0cmFjdCBtZXRob2RcclxuICAgICAqIC0gRXh0cmFjdCBmdW5jdGlvblxyXG4gICAgICogLSBFeHRyYWN0IHZhcmlhYmxlXHJcbiAgICAgKiAtIEV4dHJhY3QgaW50ZXJmYWNlIGZyb20gY2xhc3NcclxuICAgICAqIC0gLi4uXHJcbiAgICAgKi9cclxuICAgIENvZGVBY3Rpb25LaW5kLlJlZmFjdG9yRXh0cmFjdCA9ICdyZWZhY3Rvci5leHRyYWN0JztcclxuICAgIC8qKlxyXG4gICAgICogQmFzZSBraW5kIGZvciByZWZhY3RvcmluZyBpbmxpbmUgYWN0aW9uczogJ3JlZmFjdG9yLmlubGluZSdcclxuICAgICAqXHJcbiAgICAgKiBFeGFtcGxlIGlubGluZSBhY3Rpb25zOlxyXG4gICAgICpcclxuICAgICAqIC0gSW5saW5lIGZ1bmN0aW9uXHJcbiAgICAgKiAtIElubGluZSB2YXJpYWJsZVxyXG4gICAgICogLSBJbmxpbmUgY29uc3RhbnRcclxuICAgICAqIC0gLi4uXHJcbiAgICAgKi9cclxuICAgIENvZGVBY3Rpb25LaW5kLlJlZmFjdG9ySW5saW5lID0gJ3JlZmFjdG9yLmlubGluZSc7XHJcbiAgICAvKipcclxuICAgICAqIEJhc2Uga2luZCBmb3IgcmVmYWN0b3JpbmcgcmV3cml0ZSBhY3Rpb25zOiAncmVmYWN0b3IucmV3cml0ZSdcclxuICAgICAqXHJcbiAgICAgKiBFeGFtcGxlIHJld3JpdGUgYWN0aW9uczpcclxuICAgICAqXHJcbiAgICAgKiAtIENvbnZlcnQgSmF2YVNjcmlwdCBmdW5jdGlvbiB0byBjbGFzc1xyXG4gICAgICogLSBBZGQgb3IgcmVtb3ZlIHBhcmFtZXRlclxyXG4gICAgICogLSBFbmNhcHN1bGF0ZSBmaWVsZFxyXG4gICAgICogLSBNYWtlIG1ldGhvZCBzdGF0aWNcclxuICAgICAqIC0gTW92ZSBtZXRob2QgdG8gYmFzZSBjbGFzc1xyXG4gICAgICogLSAuLi5cclxuICAgICAqL1xyXG4gICAgQ29kZUFjdGlvbktpbmQuUmVmYWN0b3JSZXdyaXRlID0gJ3JlZmFjdG9yLnJld3JpdGUnO1xyXG4gICAgLyoqXHJcbiAgICAgKiBCYXNlIGtpbmQgZm9yIHNvdXJjZSBhY3Rpb25zOiBgc291cmNlYFxyXG4gICAgICpcclxuICAgICAqIFNvdXJjZSBjb2RlIGFjdGlvbnMgYXBwbHkgdG8gdGhlIGVudGlyZSBmaWxlLlxyXG4gICAgICovXHJcbiAgICBDb2RlQWN0aW9uS2luZC5Tb3VyY2UgPSAnc291cmNlJztcclxuICAgIC8qKlxyXG4gICAgICogQmFzZSBraW5kIGZvciBhbiBvcmdhbml6ZSBpbXBvcnRzIHNvdXJjZSBhY3Rpb246IGBzb3VyY2Uub3JnYW5pemVJbXBvcnRzYFxyXG4gICAgICovXHJcbiAgICBDb2RlQWN0aW9uS2luZC5Tb3VyY2VPcmdhbml6ZUltcG9ydHMgPSAnc291cmNlLm9yZ2FuaXplSW1wb3J0cyc7XHJcbn0pKENvZGVBY3Rpb25LaW5kIHx8IChDb2RlQWN0aW9uS2luZCA9IHt9KSk7XHJcbi8qKlxyXG4gKiBUaGUgQ29kZUFjdGlvbkNvbnRleHQgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXHJcbiAqIFtDb2RlQWN0aW9uQ29udGV4dF0oI0NvZGVBY3Rpb25Db250ZXh0KSBsaXRlcmFscy5cclxuICovXHJcbmV4cG9ydCB2YXIgQ29kZUFjdGlvbkNvbnRleHQ7XHJcbihmdW5jdGlvbiAoQ29kZUFjdGlvbkNvbnRleHQpIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb2RlQWN0aW9uQ29udGV4dCBsaXRlcmFsLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBjcmVhdGUoZGlhZ25vc3RpY3MsIG9ubHkpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0geyBkaWFnbm9zdGljczogZGlhZ25vc3RpY3MgfTtcclxuICAgICAgICBpZiAob25seSAhPT0gdm9pZCAwICYmIG9ubHkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmVzdWx0Lm9ubHkgPSBvbmx5O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgQ29kZUFjdGlvbkNvbnRleHQuY3JlYXRlID0gY3JlYXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW0NvZGVBY3Rpb25Db250ZXh0XSgjQ29kZUFjdGlvbkNvbnRleHQpIGludGVyZmFjZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcclxuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy50eXBlZEFycmF5KGNhbmRpZGF0ZS5kaWFnbm9zdGljcywgRGlhZ25vc3RpYy5pcykgJiYgKGNhbmRpZGF0ZS5vbmx5ID09PSB2b2lkIDAgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUub25seSwgSXMuc3RyaW5nKSk7XHJcbiAgICB9XHJcbiAgICBDb2RlQWN0aW9uQ29udGV4dC5pcyA9IGlzO1xyXG59KShDb2RlQWN0aW9uQ29udGV4dCB8fCAoQ29kZUFjdGlvbkNvbnRleHQgPSB7fSkpO1xyXG5leHBvcnQgdmFyIENvZGVBY3Rpb247XHJcbihmdW5jdGlvbiAoQ29kZUFjdGlvbikge1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlKHRpdGxlLCBjb21tYW5kT3JFZGl0LCBraW5kKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHsgdGl0bGU6IHRpdGxlIH07XHJcbiAgICAgICAgaWYgKENvbW1hbmQuaXMoY29tbWFuZE9yRWRpdCkpIHtcclxuICAgICAgICAgICAgcmVzdWx0LmNvbW1hbmQgPSBjb21tYW5kT3JFZGl0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmVzdWx0LmVkaXQgPSBjb21tYW5kT3JFZGl0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoa2luZCAhPT0gdm9pZCBudWxsKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdC5raW5kID0ga2luZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIENvZGVBY3Rpb24uY3JlYXRlID0gY3JlYXRlO1xyXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcclxuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIGNhbmRpZGF0ZSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnRpdGxlKSAmJlxyXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmRpYWdub3N0aWNzID09PSB2b2lkIDAgfHwgSXMudHlwZWRBcnJheShjYW5kaWRhdGUuZGlhZ25vc3RpY3MsIERpYWdub3N0aWMuaXMpKSAmJlxyXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmtpbmQgPT09IHZvaWQgMCB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLmtpbmQpKSAmJlxyXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmVkaXQgIT09IHZvaWQgMCB8fCBjYW5kaWRhdGUuY29tbWFuZCAhPT0gdm9pZCAwKSAmJlxyXG4gICAgICAgICAgICAoY2FuZGlkYXRlLmNvbW1hbmQgPT09IHZvaWQgMCB8fCBDb21tYW5kLmlzKGNhbmRpZGF0ZS5jb21tYW5kKSkgJiZcclxuICAgICAgICAgICAgKGNhbmRpZGF0ZS5lZGl0ID09PSB2b2lkIDAgfHwgV29ya3NwYWNlRWRpdC5pcyhjYW5kaWRhdGUuZWRpdCkpO1xyXG4gICAgfVxyXG4gICAgQ29kZUFjdGlvbi5pcyA9IGlzO1xyXG59KShDb2RlQWN0aW9uIHx8IChDb2RlQWN0aW9uID0ge30pKTtcclxuLyoqXHJcbiAqIFRoZSBDb2RlTGVucyBuYW1lc3BhY2UgcHJvdmlkZXMgaGVscGVyIGZ1bmN0aW9ucyB0byB3b3JrIHdpdGhcclxuICogW0NvZGVMZW5zXSgjQ29kZUxlbnMpIGxpdGVyYWxzLlxyXG4gKi9cclxuZXhwb3J0IHZhciBDb2RlTGVucztcclxuKGZ1bmN0aW9uIChDb2RlTGVucykge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IENvZGVMZW5zIGxpdGVyYWwuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZShyYW5nZSwgZGF0YSkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSB7IHJhbmdlOiByYW5nZSB9O1xyXG4gICAgICAgIGlmIChJcy5kZWZpbmVkKGRhdGEpKVxyXG4gICAgICAgICAgICByZXN1bHQuZGF0YSA9IGRhdGE7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuICAgIENvZGVMZW5zLmNyZWF0ZSA9IGNyZWF0ZTtcclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhlIGdpdmVuIGxpdGVyYWwgY29uZm9ybXMgdG8gdGhlIFtDb2RlTGVuc10oI0NvZGVMZW5zKSBpbnRlcmZhY2UuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGlzKHZhbHVlKSB7XHJcbiAgICAgICAgdmFyIGNhbmRpZGF0ZSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiBJcy5kZWZpbmVkKGNhbmRpZGF0ZSkgJiYgUmFuZ2UuaXMoY2FuZGlkYXRlLnJhbmdlKSAmJiAoSXMudW5kZWZpbmVkKGNhbmRpZGF0ZS5jb21tYW5kKSB8fCBDb21tYW5kLmlzKGNhbmRpZGF0ZS5jb21tYW5kKSk7XHJcbiAgICB9XHJcbiAgICBDb2RlTGVucy5pcyA9IGlzO1xyXG59KShDb2RlTGVucyB8fCAoQ29kZUxlbnMgPSB7fSkpO1xyXG4vKipcclxuICogVGhlIEZvcm1hdHRpbmdPcHRpb25zIG5hbWVzcGFjZSBwcm92aWRlcyBoZWxwZXIgZnVuY3Rpb25zIHRvIHdvcmsgd2l0aFxyXG4gKiBbRm9ybWF0dGluZ09wdGlvbnNdKCNGb3JtYXR0aW5nT3B0aW9ucykgbGl0ZXJhbHMuXHJcbiAqL1xyXG5leHBvcnQgdmFyIEZvcm1hdHRpbmdPcHRpb25zO1xyXG4oZnVuY3Rpb24gKEZvcm1hdHRpbmdPcHRpb25zKSB7XHJcbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBuZXcgRm9ybWF0dGluZ09wdGlvbnMgbGl0ZXJhbC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlKHRhYlNpemUsIGluc2VydFNwYWNlcykge1xyXG4gICAgICAgIHJldHVybiB7IHRhYlNpemU6IHRhYlNpemUsIGluc2VydFNwYWNlczogaW5zZXJ0U3BhY2VzIH07XHJcbiAgICB9XHJcbiAgICBGb3JtYXR0aW5nT3B0aW9ucy5jcmVhdGUgPSBjcmVhdGU7XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSBbRm9ybWF0dGluZ09wdGlvbnNdKCNGb3JtYXR0aW5nT3B0aW9ucykgaW50ZXJmYWNlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xyXG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIElzLm51bWJlcihjYW5kaWRhdGUudGFiU2l6ZSkgJiYgSXMuYm9vbGVhbihjYW5kaWRhdGUuaW5zZXJ0U3BhY2VzKTtcclxuICAgIH1cclxuICAgIEZvcm1hdHRpbmdPcHRpb25zLmlzID0gaXM7XHJcbn0pKEZvcm1hdHRpbmdPcHRpb25zIHx8IChGb3JtYXR0aW5nT3B0aW9ucyA9IHt9KSk7XHJcbi8qKlxyXG4gKiBBIGRvY3VtZW50IGxpbmsgaXMgYSByYW5nZSBpbiBhIHRleHQgZG9jdW1lbnQgdGhhdCBsaW5rcyB0byBhbiBpbnRlcm5hbCBvciBleHRlcm5hbCByZXNvdXJjZSwgbGlrZSBhbm90aGVyXHJcbiAqIHRleHQgZG9jdW1lbnQgb3IgYSB3ZWIgc2l0ZS5cclxuICovXHJcbnZhciBEb2N1bWVudExpbmsgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBEb2N1bWVudExpbmsoKSB7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gRG9jdW1lbnRMaW5rO1xyXG59KCkpO1xyXG5leHBvcnQgeyBEb2N1bWVudExpbmsgfTtcclxuLyoqXHJcbiAqIFRoZSBEb2N1bWVudExpbmsgbmFtZXNwYWNlIHByb3ZpZGVzIGhlbHBlciBmdW5jdGlvbnMgdG8gd29yayB3aXRoXHJcbiAqIFtEb2N1bWVudExpbmtdKCNEb2N1bWVudExpbmspIGxpdGVyYWxzLlxyXG4gKi9cclxuKGZ1bmN0aW9uIChEb2N1bWVudExpbmspIHtcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIG5ldyBEb2N1bWVudExpbmsgbGl0ZXJhbC5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gY3JlYXRlKHJhbmdlLCB0YXJnZXQsIGRhdGEpIHtcclxuICAgICAgICByZXR1cm4geyByYW5nZTogcmFuZ2UsIHRhcmdldDogdGFyZ2V0LCBkYXRhOiBkYXRhIH07XHJcbiAgICB9XHJcbiAgICBEb2N1bWVudExpbmsuY3JlYXRlID0gY3JlYXRlO1xyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3Mgd2hldGhlciB0aGUgZ2l2ZW4gbGl0ZXJhbCBjb25mb3JtcyB0byB0aGUgW0RvY3VtZW50TGlua10oI0RvY3VtZW50TGluaykgaW50ZXJmYWNlLlxyXG4gICAgICovXHJcbiAgICBmdW5jdGlvbiBpcyh2YWx1ZSkge1xyXG4gICAgICAgIHZhciBjYW5kaWRhdGUgPSB2YWx1ZTtcclxuICAgICAgICByZXR1cm4gSXMuZGVmaW5lZChjYW5kaWRhdGUpICYmIFJhbmdlLmlzKGNhbmRpZGF0ZS5yYW5nZSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUudGFyZ2V0KSB8fCBJcy5zdHJpbmcoY2FuZGlkYXRlLnRhcmdldCkpO1xyXG4gICAgfVxyXG4gICAgRG9jdW1lbnRMaW5rLmlzID0gaXM7XHJcbn0pKERvY3VtZW50TGluayB8fCAoRG9jdW1lbnRMaW5rID0ge30pKTtcclxuZXhwb3J0IHZhciBFT0wgPSBbJ1xcbicsICdcXHJcXG4nLCAnXFxyJ107XHJcbmV4cG9ydCB2YXIgVGV4dERvY3VtZW50O1xyXG4oZnVuY3Rpb24gKFRleHREb2N1bWVudCkge1xyXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbmV3IElUZXh0RG9jdW1lbnQgbGl0ZXJhbCBmcm9tIHRoZSBnaXZlbiB1cmkgYW5kIGNvbnRlbnQuXHJcbiAgICAgKiBAcGFyYW0gdXJpIFRoZSBkb2N1bWVudCdzIHVyaS5cclxuICAgICAqIEBwYXJhbSBsYW5ndWFnZUlkICBUaGUgZG9jdW1lbnQncyBsYW5ndWFnZSBJZC5cclxuICAgICAqIEBwYXJhbSBjb250ZW50IFRoZSBkb2N1bWVudCdzIGNvbnRlbnQuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIGNyZWF0ZSh1cmksIGxhbmd1YWdlSWQsIHZlcnNpb24sIGNvbnRlbnQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZ1bGxUZXh0RG9jdW1lbnQodXJpLCBsYW5ndWFnZUlkLCB2ZXJzaW9uLCBjb250ZW50KTtcclxuICAgIH1cclxuICAgIFRleHREb2N1bWVudC5jcmVhdGUgPSBjcmVhdGU7XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrcyB3aGV0aGVyIHRoZSBnaXZlbiBsaXRlcmFsIGNvbmZvcm1zIHRvIHRoZSBbSVRleHREb2N1bWVudF0oI0lUZXh0RG9jdW1lbnQpIGludGVyZmFjZS5cclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gaXModmFsdWUpIHtcclxuICAgICAgICB2YXIgY2FuZGlkYXRlID0gdmFsdWU7XHJcbiAgICAgICAgcmV0dXJuIElzLmRlZmluZWQoY2FuZGlkYXRlKSAmJiBJcy5zdHJpbmcoY2FuZGlkYXRlLnVyaSkgJiYgKElzLnVuZGVmaW5lZChjYW5kaWRhdGUubGFuZ3VhZ2VJZCkgfHwgSXMuc3RyaW5nKGNhbmRpZGF0ZS5sYW5ndWFnZUlkKSkgJiYgSXMubnVtYmVyKGNhbmRpZGF0ZS5saW5lQ291bnQpXHJcbiAgICAgICAgICAgICYmIElzLmZ1bmMoY2FuZGlkYXRlLmdldFRleHQpICYmIElzLmZ1bmMoY2FuZGlkYXRlLnBvc2l0aW9uQXQpICYmIElzLmZ1bmMoY2FuZGlkYXRlLm9mZnNldEF0KSA/IHRydWUgOiBmYWxzZTtcclxuICAgIH1cclxuICAgIFRleHREb2N1bWVudC5pcyA9IGlzO1xyXG4gICAgZnVuY3Rpb24gYXBwbHlFZGl0cyhkb2N1bWVudCwgZWRpdHMpIHtcclxuICAgICAgICB2YXIgdGV4dCA9IGRvY3VtZW50LmdldFRleHQoKTtcclxuICAgICAgICB2YXIgc29ydGVkRWRpdHMgPSBtZXJnZVNvcnQoZWRpdHMsIGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgIHZhciBkaWZmID0gYS5yYW5nZS5zdGFydC5saW5lIC0gYi5yYW5nZS5zdGFydC5saW5lO1xyXG4gICAgICAgICAgICBpZiAoZGlmZiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGEucmFuZ2Uuc3RhcnQuY2hhcmFjdGVyIC0gYi5yYW5nZS5zdGFydC5jaGFyYWN0ZXI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGRpZmY7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdmFyIGxhc3RNb2RpZmllZE9mZnNldCA9IHRleHQubGVuZ3RoO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSBzb3J0ZWRFZGl0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xyXG4gICAgICAgICAgICB2YXIgZSA9IHNvcnRlZEVkaXRzW2ldO1xyXG4gICAgICAgICAgICB2YXIgc3RhcnRPZmZzZXQgPSBkb2N1bWVudC5vZmZzZXRBdChlLnJhbmdlLnN0YXJ0KTtcclxuICAgICAgICAgICAgdmFyIGVuZE9mZnNldCA9IGRvY3VtZW50Lm9mZnNldEF0KGUucmFuZ2UuZW5kKTtcclxuICAgICAgICAgICAgaWYgKGVuZE9mZnNldCA8PSBsYXN0TW9kaWZpZWRPZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgIHRleHQgPSB0ZXh0LnN1YnN0cmluZygwLCBzdGFydE9mZnNldCkgKyBlLm5ld1RleHQgKyB0ZXh0LnN1YnN0cmluZyhlbmRPZmZzZXQsIHRleHQubGVuZ3RoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignT3ZlcmxhcHBpbmcgZWRpdCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGxhc3RNb2RpZmllZE9mZnNldCA9IHN0YXJ0T2Zmc2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGV4dDtcclxuICAgIH1cclxuICAgIFRleHREb2N1bWVudC5hcHBseUVkaXRzID0gYXBwbHlFZGl0cztcclxuICAgIGZ1bmN0aW9uIG1lcmdlU29ydChkYXRhLCBjb21wYXJlKSB7XHJcbiAgICAgICAgaWYgKGRhdGEubGVuZ3RoIDw9IDEpIHtcclxuICAgICAgICAgICAgLy8gc29ydGVkXHJcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgcCA9IChkYXRhLmxlbmd0aCAvIDIpIHwgMDtcclxuICAgICAgICB2YXIgbGVmdCA9IGRhdGEuc2xpY2UoMCwgcCk7XHJcbiAgICAgICAgdmFyIHJpZ2h0ID0gZGF0YS5zbGljZShwKTtcclxuICAgICAgICBtZXJnZVNvcnQobGVmdCwgY29tcGFyZSk7XHJcbiAgICAgICAgbWVyZ2VTb3J0KHJpZ2h0LCBjb21wYXJlKTtcclxuICAgICAgICB2YXIgbGVmdElkeCA9IDA7XHJcbiAgICAgICAgdmFyIHJpZ2h0SWR4ID0gMDtcclxuICAgICAgICB2YXIgaSA9IDA7XHJcbiAgICAgICAgd2hpbGUgKGxlZnRJZHggPCBsZWZ0Lmxlbmd0aCAmJiByaWdodElkeCA8IHJpZ2h0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICB2YXIgcmV0ID0gY29tcGFyZShsZWZ0W2xlZnRJZHhdLCByaWdodFtyaWdodElkeF0pO1xyXG4gICAgICAgICAgICBpZiAocmV0IDw9IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIHNtYWxsZXJfZXF1YWwgLT4gdGFrZSBsZWZ0IHRvIHByZXNlcnZlIG9yZGVyXHJcbiAgICAgICAgICAgICAgICBkYXRhW2krK10gPSBsZWZ0W2xlZnRJZHgrK107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBncmVhdGVyIC0+IHRha2UgcmlnaHRcclxuICAgICAgICAgICAgICAgIGRhdGFbaSsrXSA9IHJpZ2h0W3JpZ2h0SWR4KytdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlIChsZWZ0SWR4IDwgbGVmdC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZGF0YVtpKytdID0gbGVmdFtsZWZ0SWR4KytdO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAocmlnaHRJZHggPCByaWdodC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgZGF0YVtpKytdID0gcmlnaHRbcmlnaHRJZHgrK107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkYXRhO1xyXG4gICAgfVxyXG59KShUZXh0RG9jdW1lbnQgfHwgKFRleHREb2N1bWVudCA9IHt9KSk7XHJcbi8qKlxyXG4gKiBSZXByZXNlbnRzIHJlYXNvbnMgd2h5IGEgdGV4dCBkb2N1bWVudCBpcyBzYXZlZC5cclxuICovXHJcbmV4cG9ydCB2YXIgVGV4dERvY3VtZW50U2F2ZVJlYXNvbjtcclxuKGZ1bmN0aW9uIChUZXh0RG9jdW1lbnRTYXZlUmVhc29uKSB7XHJcbiAgICAvKipcclxuICAgICAqIE1hbnVhbGx5IHRyaWdnZXJlZCwgZS5nLiBieSB0aGUgdXNlciBwcmVzc2luZyBzYXZlLCBieSBzdGFydGluZyBkZWJ1Z2dpbmcsXHJcbiAgICAgKiBvciBieSBhbiBBUEkgY2FsbC5cclxuICAgICAqL1xyXG4gICAgVGV4dERvY3VtZW50U2F2ZVJlYXNvbi5NYW51YWwgPSAxO1xyXG4gICAgLyoqXHJcbiAgICAgKiBBdXRvbWF0aWMgYWZ0ZXIgYSBkZWxheS5cclxuICAgICAqL1xyXG4gICAgVGV4dERvY3VtZW50U2F2ZVJlYXNvbi5BZnRlckRlbGF5ID0gMjtcclxuICAgIC8qKlxyXG4gICAgICogV2hlbiB0aGUgZWRpdG9yIGxvc3QgZm9jdXMuXHJcbiAgICAgKi9cclxuICAgIFRleHREb2N1bWVudFNhdmVSZWFzb24uRm9jdXNPdXQgPSAzO1xyXG59KShUZXh0RG9jdW1lbnRTYXZlUmVhc29uIHx8IChUZXh0RG9jdW1lbnRTYXZlUmVhc29uID0ge30pKTtcclxudmFyIEZ1bGxUZXh0RG9jdW1lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICBmdW5jdGlvbiBGdWxsVGV4dERvY3VtZW50KHVyaSwgbGFuZ3VhZ2VJZCwgdmVyc2lvbiwgY29udGVudCkge1xyXG4gICAgICAgIHRoaXMuX3VyaSA9IHVyaTtcclxuICAgICAgICB0aGlzLl9sYW5ndWFnZUlkID0gbGFuZ3VhZ2VJZDtcclxuICAgICAgICB0aGlzLl92ZXJzaW9uID0gdmVyc2lvbjtcclxuICAgICAgICB0aGlzLl9jb250ZW50ID0gY29udGVudDtcclxuICAgICAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IG51bGw7XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUsIFwidXJpXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX3VyaTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZSwgXCJsYW5ndWFnZUlkXCIsIHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xhbmd1YWdlSWQ7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUsIFwidmVyc2lvblwiLCB7XHJcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl92ZXJzaW9uO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcclxuICAgIH0pO1xyXG4gICAgRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUuZ2V0VGV4dCA9IGZ1bmN0aW9uIChyYW5nZSkge1xyXG4gICAgICAgIGlmIChyYW5nZSkge1xyXG4gICAgICAgICAgICB2YXIgc3RhcnQgPSB0aGlzLm9mZnNldEF0KHJhbmdlLnN0YXJ0KTtcclxuICAgICAgICAgICAgdmFyIGVuZCA9IHRoaXMub2Zmc2V0QXQocmFuZ2UuZW5kKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRlbnQuc3Vic3RyaW5nKHN0YXJ0LCBlbmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fY29udGVudDtcclxuICAgIH07XHJcbiAgICBGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbiAoZXZlbnQsIHZlcnNpb24pIHtcclxuICAgICAgICB0aGlzLl9jb250ZW50ID0gZXZlbnQudGV4dDtcclxuICAgICAgICB0aGlzLl92ZXJzaW9uID0gdmVyc2lvbjtcclxuICAgICAgICB0aGlzLl9saW5lT2Zmc2V0cyA9IG51bGw7XHJcbiAgICB9O1xyXG4gICAgRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUuZ2V0TGluZU9mZnNldHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2xpbmVPZmZzZXRzID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHZhciBsaW5lT2Zmc2V0cyA9IFtdO1xyXG4gICAgICAgICAgICB2YXIgdGV4dCA9IHRoaXMuX2NvbnRlbnQ7XHJcbiAgICAgICAgICAgIHZhciBpc0xpbmVTdGFydCA9IHRydWU7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTGluZVN0YXJ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbGluZU9mZnNldHMucHVzaChpKTtcclxuICAgICAgICAgICAgICAgICAgICBpc0xpbmVTdGFydCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGNoID0gdGV4dC5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICBpc0xpbmVTdGFydCA9IChjaCA9PT0gJ1xccicgfHwgY2ggPT09ICdcXG4nKTtcclxuICAgICAgICAgICAgICAgIGlmIChjaCA9PT0gJ1xccicgJiYgaSArIDEgPCB0ZXh0Lmxlbmd0aCAmJiB0ZXh0LmNoYXJBdChpICsgMSkgPT09ICdcXG4nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmIChpc0xpbmVTdGFydCAmJiB0ZXh0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGxpbmVPZmZzZXRzLnB1c2godGV4dC5sZW5ndGgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX2xpbmVPZmZzZXRzID0gbGluZU9mZnNldHM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzLl9saW5lT2Zmc2V0cztcclxuICAgIH07XHJcbiAgICBGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZS5wb3NpdGlvbkF0ID0gZnVuY3Rpb24gKG9mZnNldCkge1xyXG4gICAgICAgIG9mZnNldCA9IE1hdGgubWF4KE1hdGgubWluKG9mZnNldCwgdGhpcy5fY29udGVudC5sZW5ndGgpLCAwKTtcclxuICAgICAgICB2YXIgbGluZU9mZnNldHMgPSB0aGlzLmdldExpbmVPZmZzZXRzKCk7XHJcbiAgICAgICAgdmFyIGxvdyA9IDAsIGhpZ2ggPSBsaW5lT2Zmc2V0cy5sZW5ndGg7XHJcbiAgICAgICAgaWYgKGhpZ2ggPT09IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFBvc2l0aW9uLmNyZWF0ZSgwLCBvZmZzZXQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAobG93IDwgaGlnaCkge1xyXG4gICAgICAgICAgICB2YXIgbWlkID0gTWF0aC5mbG9vcigobG93ICsgaGlnaCkgLyAyKTtcclxuICAgICAgICAgICAgaWYgKGxpbmVPZmZzZXRzW21pZF0gPiBvZmZzZXQpIHtcclxuICAgICAgICAgICAgICAgIGhpZ2ggPSBtaWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsb3cgPSBtaWQgKyAxO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGxvdyBpcyB0aGUgbGVhc3QgeCBmb3Igd2hpY2ggdGhlIGxpbmUgb2Zmc2V0IGlzIGxhcmdlciB0aGFuIHRoZSBjdXJyZW50IG9mZnNldFxyXG4gICAgICAgIC8vIG9yIGFycmF5Lmxlbmd0aCBpZiBubyBsaW5lIG9mZnNldCBpcyBsYXJnZXIgdGhhbiB0aGUgY3VycmVudCBvZmZzZXRcclxuICAgICAgICB2YXIgbGluZSA9IGxvdyAtIDE7XHJcbiAgICAgICAgcmV0dXJuIFBvc2l0aW9uLmNyZWF0ZShsaW5lLCBvZmZzZXQgLSBsaW5lT2Zmc2V0c1tsaW5lXSk7XHJcbiAgICB9O1xyXG4gICAgRnVsbFRleHREb2N1bWVudC5wcm90b3R5cGUub2Zmc2V0QXQgPSBmdW5jdGlvbiAocG9zaXRpb24pIHtcclxuICAgICAgICB2YXIgbGluZU9mZnNldHMgPSB0aGlzLmdldExpbmVPZmZzZXRzKCk7XHJcbiAgICAgICAgaWYgKHBvc2l0aW9uLmxpbmUgPj0gbGluZU9mZnNldHMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jb250ZW50Lmxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAocG9zaXRpb24ubGluZSA8IDApIHtcclxuICAgICAgICAgICAgcmV0dXJuIDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBsaW5lT2Zmc2V0ID0gbGluZU9mZnNldHNbcG9zaXRpb24ubGluZV07XHJcbiAgICAgICAgdmFyIG5leHRMaW5lT2Zmc2V0ID0gKHBvc2l0aW9uLmxpbmUgKyAxIDwgbGluZU9mZnNldHMubGVuZ3RoKSA/IGxpbmVPZmZzZXRzW3Bvc2l0aW9uLmxpbmUgKyAxXSA6IHRoaXMuX2NvbnRlbnQubGVuZ3RoO1xyXG4gICAgICAgIHJldHVybiBNYXRoLm1heChNYXRoLm1pbihsaW5lT2Zmc2V0ICsgcG9zaXRpb24uY2hhcmFjdGVyLCBuZXh0TGluZU9mZnNldCksIGxpbmVPZmZzZXQpO1xyXG4gICAgfTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGdWxsVGV4dERvY3VtZW50LnByb3RvdHlwZSwgXCJsaW5lQ291bnRcIiwge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5nZXRMaW5lT2Zmc2V0cygpLmxlbmd0aDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXHJcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHJldHVybiBGdWxsVGV4dERvY3VtZW50O1xyXG59KCkpO1xyXG52YXIgSXM7XHJcbihmdW5jdGlvbiAoSXMpIHtcclxuICAgIHZhciB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XHJcbiAgICBmdW5jdGlvbiBkZWZpbmVkKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSAhPT0gJ3VuZGVmaW5lZCc7XHJcbiAgICB9XHJcbiAgICBJcy5kZWZpbmVkID0gZGVmaW5lZDtcclxuICAgIGZ1bmN0aW9uIHVuZGVmaW5lZCh2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnO1xyXG4gICAgfVxyXG4gICAgSXMudW5kZWZpbmVkID0gdW5kZWZpbmVkO1xyXG4gICAgZnVuY3Rpb24gYm9vbGVhbih2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gdHJ1ZSB8fCB2YWx1ZSA9PT0gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBJcy5ib29sZWFuID0gYm9vbGVhbjtcclxuICAgIGZ1bmN0aW9uIHN0cmluZyh2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgU3RyaW5nXSc7XHJcbiAgICB9XHJcbiAgICBJcy5zdHJpbmcgPSBzdHJpbmc7XHJcbiAgICBmdW5jdGlvbiBudW1iZXIodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE51bWJlcl0nO1xyXG4gICAgfVxyXG4gICAgSXMubnVtYmVyID0gbnVtYmVyO1xyXG4gICAgZnVuY3Rpb24gZnVuYyh2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0b1N0cmluZy5jYWxsKHZhbHVlKSA9PT0gJ1tvYmplY3QgRnVuY3Rpb25dJztcclxuICAgIH1cclxuICAgIElzLmZ1bmMgPSBmdW5jO1xyXG4gICAgZnVuY3Rpb24gb2JqZWN0TGl0ZXJhbCh2YWx1ZSkge1xyXG4gICAgICAgIC8vIFN0cmljdGx5IHNwZWFraW5nIGNsYXNzIGluc3RhbmNlcyBwYXNzIHRoaXMgY2hlY2sgYXMgd2VsbC4gU2luY2UgdGhlIExTUFxyXG4gICAgICAgIC8vIGRvZXNuJ3QgdXNlIGNsYXNzZXMgd2UgaWdub3JlIHRoaXMgZm9yIG5vdy4gSWYgd2UgZG8gd2UgbmVlZCB0byBhZGQgc29tZXRoaW5nXHJcbiAgICAgICAgLy8gbGlrZSB0aGlzOiBgT2JqZWN0LmdldFByb3RvdHlwZU9mKE9iamVjdC5nZXRQcm90b3R5cGVPZih4KSkgPT09IG51bGxgXHJcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCc7XHJcbiAgICB9XHJcbiAgICBJcy5vYmplY3RMaXRlcmFsID0gb2JqZWN0TGl0ZXJhbDtcclxuICAgIGZ1bmN0aW9uIHR5cGVkQXJyYXkodmFsdWUsIGNoZWNrKSB7XHJcbiAgICAgICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmV2ZXJ5KGNoZWNrKTtcclxuICAgIH1cclxuICAgIElzLnR5cGVkQXJyYXkgPSB0eXBlZEFycmF5O1xyXG59KShJcyB8fCAoSXMgPSB7fSkpO1xyXG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbid1c2Ugc3RyaWN0JztcbnZhciBTVE9QX1dIRU5fSURMRV9GT1IgPSAyICogNjAgKiAxMDAwOyAvLyAybWluXG52YXIgV29ya2VyTWFuYWdlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBXb3JrZXJNYW5hZ2VyKGRlZmF1bHRzKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuX2RlZmF1bHRzID0gZGVmYXVsdHM7XG4gICAgICAgIHRoaXMuX3dvcmtlciA9IG51bGw7XG4gICAgICAgIHRoaXMuX2lkbGVDaGVja0ludGVydmFsID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2NoZWNrSWZJZGxlKCk7IH0sIDMwICogMTAwMCk7XG4gICAgICAgIHRoaXMuX2xhc3RVc2VkVGltZSA9IDA7XG4gICAgICAgIHRoaXMuX2NvbmZpZ0NoYW5nZUxpc3RlbmVyID0gdGhpcy5fZGVmYXVsdHMub25EaWRDaGFuZ2UoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX3N0b3BXb3JrZXIoKTsgfSk7XG4gICAgfVxuICAgIFdvcmtlck1hbmFnZXIucHJvdG90eXBlLl9zdG9wV29ya2VyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5fd29ya2VyKSB7XG4gICAgICAgICAgICB0aGlzLl93b3JrZXIuZGlzcG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5fd29ya2VyID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jbGllbnQgPSBudWxsO1xuICAgIH07XG4gICAgV29ya2VyTWFuYWdlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aGlzLl9pZGxlQ2hlY2tJbnRlcnZhbCk7XG4gICAgICAgIHRoaXMuX2NvbmZpZ0NoYW5nZUxpc3RlbmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgdGhpcy5fc3RvcFdvcmtlcigpO1xuICAgIH07XG4gICAgV29ya2VyTWFuYWdlci5wcm90b3R5cGUuX2NoZWNrSWZJZGxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuX3dvcmtlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0aW1lUGFzc2VkU2luY2VMYXN0VXNlZCA9IERhdGUubm93KCkgLSB0aGlzLl9sYXN0VXNlZFRpbWU7XG4gICAgICAgIGlmICh0aW1lUGFzc2VkU2luY2VMYXN0VXNlZCA+IFNUT1BfV0hFTl9JRExFX0ZPUikge1xuICAgICAgICAgICAgdGhpcy5fc3RvcFdvcmtlcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBXb3JrZXJNYW5hZ2VyLnByb3RvdHlwZS5fZ2V0Q2xpZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9sYXN0VXNlZFRpbWUgPSBEYXRlLm5vdygpO1xuICAgICAgICBpZiAoIXRoaXMuX2NsaWVudCkge1xuICAgICAgICAgICAgdGhpcy5fd29ya2VyID0gbW9uYWNvLmVkaXRvci5jcmVhdGVXZWJXb3JrZXIoe1xuICAgICAgICAgICAgICAgIC8vIG1vZHVsZSB0aGF0IGV4cG9ydHMgdGhlIGNyZWF0ZSgpIG1ldGhvZCBhbmQgcmV0dXJucyBhIGBIVE1MV29ya2VyYCBpbnN0YW5jZVxuICAgICAgICAgICAgICAgIG1vZHVsZUlkOiAndnMvbGFuZ3VhZ2UvaHRtbC9odG1sV29ya2VyJyxcbiAgICAgICAgICAgICAgICAvLyBwYXNzZWQgaW4gdG8gdGhlIGNyZWF0ZSgpIG1ldGhvZFxuICAgICAgICAgICAgICAgIGNyZWF0ZURhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VTZXR0aW5nczogdGhpcy5fZGVmYXVsdHMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICAgICAgbGFuZ3VhZ2VJZDogdGhpcy5fZGVmYXVsdHMubGFuZ3VhZ2VJZFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgbGFiZWw6IHRoaXMuX2RlZmF1bHRzLmxhbmd1YWdlSWRcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fY2xpZW50ID0gdGhpcy5fd29ya2VyLmdldFByb3h5KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX2NsaWVudDtcbiAgICB9O1xuICAgIFdvcmtlck1hbmFnZXIucHJvdG90eXBlLmdldExhbmd1YWdlU2VydmljZVdvcmtlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHJlc291cmNlcyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgcmVzb3VyY2VzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIF9jbGllbnQ7XG4gICAgICAgIHJldHVybiB0aGlzLl9nZXRDbGllbnQoKS50aGVuKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgICAgICAgIF9jbGllbnQgPSBjbGllbnQ7XG4gICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKF8pIHtcbiAgICAgICAgICAgIHJldHVybiBfdGhpcy5fd29ya2VyLndpdGhTeW5jZWRSZXNvdXJjZXMocmVzb3VyY2VzKTtcbiAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoXykgeyByZXR1cm4gX2NsaWVudDsgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gV29ya2VyTWFuYWdlcjtcbn0oKSk7XG5leHBvcnQgeyBXb3JrZXJNYW5hZ2VyIH07XG4iLCIvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICogIENvcHlyaWdodCAoYykgTWljcm9zb2Z0IENvcnBvcmF0aW9uLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cbid1c2Ugc3RyaWN0JztcbmltcG9ydCAqIGFzIGxzIGZyb20gJy4vX2RlcHMvdnNjb2RlLWxhbmd1YWdlc2VydmVyLXR5cGVzL21haW4uanMnO1xudmFyIFJhbmdlID0gbW9uYWNvLlJhbmdlO1xuLy8gLS0tIGRpYWdub3N0aWNzIC0tLSAtLS1cbnZhciBEaWFnbm9zdGljc0FkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRGlhZ25vc3RpY3NBZGFwdGVyKF9sYW5ndWFnZUlkLCBfd29ya2VyLCBkZWZhdWx0cykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLl9sYW5ndWFnZUlkID0gX2xhbmd1YWdlSWQ7XG4gICAgICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzID0gW107XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgICAgdmFyIG9uTW9kZWxBZGQgPSBmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgICAgICAgIHZhciBtb2RlSWQgPSBtb2RlbC5nZXRNb2RlSWQoKTtcbiAgICAgICAgICAgIGlmIChtb2RlSWQgIT09IF90aGlzLl9sYW5ndWFnZUlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhhbmRsZTtcbiAgICAgICAgICAgIF90aGlzLl9saXN0ZW5lclttb2RlbC51cmkudG9TdHJpbmcoKV0gPSBtb2RlbC5vbkRpZENoYW5nZUNvbnRlbnQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dChoYW5kbGUpO1xuICAgICAgICAgICAgICAgIGhhbmRsZSA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuX2RvVmFsaWRhdGUobW9kZWwudXJpLCBtb2RlSWQpOyB9LCA1MDApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBfdGhpcy5fZG9WYWxpZGF0ZShtb2RlbC51cmksIG1vZGVJZCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBvbk1vZGVsUmVtb3ZlZCA9IGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgICAgICAgbW9uYWNvLmVkaXRvci5zZXRNb2RlbE1hcmtlcnMobW9kZWwsIF90aGlzLl9sYW5ndWFnZUlkLCBbXSk7XG4gICAgICAgICAgICB2YXIgdXJpU3RyID0gbW9kZWwudXJpLnRvU3RyaW5nKCk7XG4gICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBfdGhpcy5fbGlzdGVuZXJbdXJpU3RyXTtcbiAgICAgICAgICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgICAgICAgICAgIGxpc3RlbmVyLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICBkZWxldGUgX3RoaXMuX2xpc3RlbmVyW3VyaVN0cl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzLnB1c2gobW9uYWNvLmVkaXRvci5vbkRpZENyZWF0ZU1vZGVsKG9uTW9kZWxBZGQpKTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMucHVzaChtb25hY28uZWRpdG9yLm9uV2lsbERpc3Bvc2VNb2RlbChmdW5jdGlvbiAobW9kZWwpIHtcbiAgICAgICAgICAgIG9uTW9kZWxSZW1vdmVkKG1vZGVsKTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcy5wdXNoKG1vbmFjby5lZGl0b3Iub25EaWRDaGFuZ2VNb2RlbExhbmd1YWdlKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgb25Nb2RlbFJlbW92ZWQoZXZlbnQubW9kZWwpO1xuICAgICAgICAgICAgb25Nb2RlbEFkZChldmVudC5tb2RlbCk7XG4gICAgICAgIH0pKTtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMucHVzaChkZWZhdWx0cy5vbkRpZENoYW5nZShmdW5jdGlvbiAoXykge1xuICAgICAgICAgICAgbW9uYWNvLmVkaXRvci5nZXRNb2RlbHMoKS5mb3JFYWNoKGZ1bmN0aW9uIChtb2RlbCkge1xuICAgICAgICAgICAgICAgIGlmIChtb2RlbC5nZXRNb2RlSWQoKSA9PT0gX3RoaXMuX2xhbmd1YWdlSWQpIHtcbiAgICAgICAgICAgICAgICAgICAgb25Nb2RlbFJlbW92ZWQobW9kZWwpO1xuICAgICAgICAgICAgICAgICAgICBvbk1vZGVsQWRkKG1vZGVsKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSkpO1xuICAgICAgICB0aGlzLl9kaXNwb3NhYmxlcy5wdXNoKHtcbiAgICAgICAgICAgIGRpc3Bvc2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gX3RoaXMuX2xpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLl9saXN0ZW5lcltrZXldLmRpc3Bvc2UoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBtb25hY28uZWRpdG9yLmdldE1vZGVscygpLmZvckVhY2gob25Nb2RlbEFkZCk7XG4gICAgfVxuICAgIERpYWdub3N0aWNzQWRhcHRlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fZGlzcG9zYWJsZXMuZm9yRWFjaChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZCAmJiBkLmRpc3Bvc2UoKTsgfSk7XG4gICAgICAgIHRoaXMuX2Rpc3Bvc2FibGVzID0gW107XG4gICAgfTtcbiAgICBEaWFnbm9zdGljc0FkYXB0ZXIucHJvdG90eXBlLl9kb1ZhbGlkYXRlID0gZnVuY3Rpb24gKHJlc291cmNlLCBsYW5ndWFnZUlkKSB7XG4gICAgICAgIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbihmdW5jdGlvbiAod29ya2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gd29ya2VyLmRvVmFsaWRhdGlvbihyZXNvdXJjZS50b1N0cmluZygpKS50aGVuKGZ1bmN0aW9uIChkaWFnbm9zdGljcykge1xuICAgICAgICAgICAgICAgIHZhciBtYXJrZXJzID0gZGlhZ25vc3RpY3MubWFwKGZ1bmN0aW9uIChkKSB7IHJldHVybiB0b0RpYWdub3N0aWNzKHJlc291cmNlLCBkKTsgfSk7XG4gICAgICAgICAgICAgICAgbW9uYWNvLmVkaXRvci5zZXRNb2RlbE1hcmtlcnMobW9uYWNvLmVkaXRvci5nZXRNb2RlbChyZXNvdXJjZSksIGxhbmd1YWdlSWQsIG1hcmtlcnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pLnRoZW4odW5kZWZpbmVkLCBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKGVycik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIERpYWdub3N0aWNzQWRhcHRlcjtcbn0oKSk7XG5leHBvcnQgeyBEaWFnbm9zdGljc0FkYXB0ZXIgfTtcbmZ1bmN0aW9uIHRvU2V2ZXJpdHkobHNTZXZlcml0eSkge1xuICAgIHN3aXRjaCAobHNTZXZlcml0eSkge1xuICAgICAgICBjYXNlIGxzLkRpYWdub3N0aWNTZXZlcml0eS5FcnJvcjogcmV0dXJuIG1vbmFjby5NYXJrZXJTZXZlcml0eS5FcnJvcjtcbiAgICAgICAgY2FzZSBscy5EaWFnbm9zdGljU2V2ZXJpdHkuV2FybmluZzogcmV0dXJuIG1vbmFjby5NYXJrZXJTZXZlcml0eS5XYXJuaW5nO1xuICAgICAgICBjYXNlIGxzLkRpYWdub3N0aWNTZXZlcml0eS5JbmZvcm1hdGlvbjogcmV0dXJuIG1vbmFjby5NYXJrZXJTZXZlcml0eS5JbmZvO1xuICAgICAgICBjYXNlIGxzLkRpYWdub3N0aWNTZXZlcml0eS5IaW50OiByZXR1cm4gbW9uYWNvLk1hcmtlclNldmVyaXR5LkhpbnQ7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gbW9uYWNvLk1hcmtlclNldmVyaXR5LkluZm87XG4gICAgfVxufVxuZnVuY3Rpb24gdG9EaWFnbm9zdGljcyhyZXNvdXJjZSwgZGlhZykge1xuICAgIHZhciBjb2RlID0gdHlwZW9mIGRpYWcuY29kZSA9PT0gJ251bWJlcicgPyBTdHJpbmcoZGlhZy5jb2RlKSA6IGRpYWcuY29kZTtcbiAgICByZXR1cm4ge1xuICAgICAgICBzZXZlcml0eTogdG9TZXZlcml0eShkaWFnLnNldmVyaXR5KSxcbiAgICAgICAgc3RhcnRMaW5lTnVtYmVyOiBkaWFnLnJhbmdlLnN0YXJ0LmxpbmUgKyAxLFxuICAgICAgICBzdGFydENvbHVtbjogZGlhZy5yYW5nZS5zdGFydC5jaGFyYWN0ZXIgKyAxLFxuICAgICAgICBlbmRMaW5lTnVtYmVyOiBkaWFnLnJhbmdlLmVuZC5saW5lICsgMSxcbiAgICAgICAgZW5kQ29sdW1uOiBkaWFnLnJhbmdlLmVuZC5jaGFyYWN0ZXIgKyAxLFxuICAgICAgICBtZXNzYWdlOiBkaWFnLm1lc3NhZ2UsXG4gICAgICAgIGNvZGU6IGNvZGUsXG4gICAgICAgIHNvdXJjZTogZGlhZy5zb3VyY2VcbiAgICB9O1xufVxuLy8gLS0tIGNvbXBsZXRpb24gLS0tLS0tXG5mdW5jdGlvbiBmcm9tUG9zaXRpb24ocG9zaXRpb24pIHtcbiAgICBpZiAoIXBvc2l0aW9uKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiB7IGNoYXJhY3RlcjogcG9zaXRpb24uY29sdW1uIC0gMSwgbGluZTogcG9zaXRpb24ubGluZU51bWJlciAtIDEgfTtcbn1cbmZ1bmN0aW9uIGZyb21SYW5nZShyYW5nZSkge1xuICAgIGlmICghcmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIHsgc3RhcnQ6IGZyb21Qb3NpdGlvbihyYW5nZS5nZXRTdGFydFBvc2l0aW9uKCkpLCBlbmQ6IGZyb21Qb3NpdGlvbihyYW5nZS5nZXRFbmRQb3NpdGlvbigpKSB9O1xufVxuZnVuY3Rpb24gdG9SYW5nZShyYW5nZSkge1xuICAgIGlmICghcmFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBSYW5nZShyYW5nZS5zdGFydC5saW5lICsgMSwgcmFuZ2Uuc3RhcnQuY2hhcmFjdGVyICsgMSwgcmFuZ2UuZW5kLmxpbmUgKyAxLCByYW5nZS5lbmQuY2hhcmFjdGVyICsgMSk7XG59XG5mdW5jdGlvbiB0b0NvbXBsZXRpb25JdGVtS2luZChraW5kKSB7XG4gICAgdmFyIG1JdGVtS2luZCA9IG1vbmFjby5sYW5ndWFnZXMuQ29tcGxldGlvbkl0ZW1LaW5kO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5UZXh0OiByZXR1cm4gbUl0ZW1LaW5kLlRleHQ7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLk1ldGhvZDogcmV0dXJuIG1JdGVtS2luZC5NZXRob2Q7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLkZ1bmN0aW9uOiByZXR1cm4gbUl0ZW1LaW5kLkZ1bmN0aW9uO1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5Db25zdHJ1Y3RvcjogcmV0dXJuIG1JdGVtS2luZC5Db25zdHJ1Y3RvcjtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuRmllbGQ6IHJldHVybiBtSXRlbUtpbmQuRmllbGQ7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLlZhcmlhYmxlOiByZXR1cm4gbUl0ZW1LaW5kLlZhcmlhYmxlO1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5DbGFzczogcmV0dXJuIG1JdGVtS2luZC5DbGFzcztcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuSW50ZXJmYWNlOiByZXR1cm4gbUl0ZW1LaW5kLkludGVyZmFjZTtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlOiByZXR1cm4gbUl0ZW1LaW5kLk1vZHVsZTtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuUHJvcGVydHk6IHJldHVybiBtSXRlbUtpbmQuUHJvcGVydHk7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLlVuaXQ6IHJldHVybiBtSXRlbUtpbmQuVW5pdDtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuVmFsdWU6IHJldHVybiBtSXRlbUtpbmQuVmFsdWU7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLkVudW06IHJldHVybiBtSXRlbUtpbmQuRW51bTtcbiAgICAgICAgY2FzZSBscy5Db21wbGV0aW9uSXRlbUtpbmQuS2V5d29yZDogcmV0dXJuIG1JdGVtS2luZC5LZXl3b3JkO1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5TbmlwcGV0OiByZXR1cm4gbUl0ZW1LaW5kLlNuaXBwZXQ7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLkNvbG9yOiByZXR1cm4gbUl0ZW1LaW5kLkNvbG9yO1xuICAgICAgICBjYXNlIGxzLkNvbXBsZXRpb25JdGVtS2luZC5GaWxlOiByZXR1cm4gbUl0ZW1LaW5kLkZpbGU7XG4gICAgICAgIGNhc2UgbHMuQ29tcGxldGlvbkl0ZW1LaW5kLlJlZmVyZW5jZTogcmV0dXJuIG1JdGVtS2luZC5SZWZlcmVuY2U7XG4gICAgfVxuICAgIHJldHVybiBtSXRlbUtpbmQuUHJvcGVydHk7XG59XG5mdW5jdGlvbiBmcm9tQ29tcGxldGlvbkl0ZW1LaW5kKGtpbmQpIHtcbiAgICB2YXIgbUl0ZW1LaW5kID0gbW9uYWNvLmxhbmd1YWdlcy5Db21wbGV0aW9uSXRlbUtpbmQ7XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgIGNhc2UgbUl0ZW1LaW5kLlRleHQ6IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuVGV4dDtcbiAgICAgICAgY2FzZSBtSXRlbUtpbmQuTWV0aG9kOiByZXR1cm4gbHMuQ29tcGxldGlvbkl0ZW1LaW5kLk1ldGhvZDtcbiAgICAgICAgY2FzZSBtSXRlbUtpbmQuRnVuY3Rpb246IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuRnVuY3Rpb247XG4gICAgICAgIGNhc2UgbUl0ZW1LaW5kLkNvbnN0cnVjdG9yOiByZXR1cm4gbHMuQ29tcGxldGlvbkl0ZW1LaW5kLkNvbnN0cnVjdG9yO1xuICAgICAgICBjYXNlIG1JdGVtS2luZC5GaWVsZDogcmV0dXJuIGxzLkNvbXBsZXRpb25JdGVtS2luZC5GaWVsZDtcbiAgICAgICAgY2FzZSBtSXRlbUtpbmQuVmFyaWFibGU6IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuVmFyaWFibGU7XG4gICAgICAgIGNhc2UgbUl0ZW1LaW5kLkNsYXNzOiByZXR1cm4gbHMuQ29tcGxldGlvbkl0ZW1LaW5kLkNsYXNzO1xuICAgICAgICBjYXNlIG1JdGVtS2luZC5JbnRlcmZhY2U6IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuSW50ZXJmYWNlO1xuICAgICAgICBjYXNlIG1JdGVtS2luZC5Nb2R1bGU6IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuTW9kdWxlO1xuICAgICAgICBjYXNlIG1JdGVtS2luZC5Qcm9wZXJ0eTogcmV0dXJuIGxzLkNvbXBsZXRpb25JdGVtS2luZC5Qcm9wZXJ0eTtcbiAgICAgICAgY2FzZSBtSXRlbUtpbmQuVW5pdDogcmV0dXJuIGxzLkNvbXBsZXRpb25JdGVtS2luZC5Vbml0O1xuICAgICAgICBjYXNlIG1JdGVtS2luZC5WYWx1ZTogcmV0dXJuIGxzLkNvbXBsZXRpb25JdGVtS2luZC5WYWx1ZTtcbiAgICAgICAgY2FzZSBtSXRlbUtpbmQuRW51bTogcmV0dXJuIGxzLkNvbXBsZXRpb25JdGVtS2luZC5FbnVtO1xuICAgICAgICBjYXNlIG1JdGVtS2luZC5LZXl3b3JkOiByZXR1cm4gbHMuQ29tcGxldGlvbkl0ZW1LaW5kLktleXdvcmQ7XG4gICAgICAgIGNhc2UgbUl0ZW1LaW5kLlNuaXBwZXQ6IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuU25pcHBldDtcbiAgICAgICAgY2FzZSBtSXRlbUtpbmQuQ29sb3I6IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuQ29sb3I7XG4gICAgICAgIGNhc2UgbUl0ZW1LaW5kLkZpbGU6IHJldHVybiBscy5Db21wbGV0aW9uSXRlbUtpbmQuRmlsZTtcbiAgICAgICAgY2FzZSBtSXRlbUtpbmQuUmVmZXJlbmNlOiByZXR1cm4gbHMuQ29tcGxldGlvbkl0ZW1LaW5kLlJlZmVyZW5jZTtcbiAgICB9XG4gICAgcmV0dXJuIGxzLkNvbXBsZXRpb25JdGVtS2luZC5Qcm9wZXJ0eTtcbn1cbmZ1bmN0aW9uIHRvVGV4dEVkaXQodGV4dEVkaXQpIHtcbiAgICBpZiAoIXRleHRFZGl0KSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIHJhbmdlOiB0b1JhbmdlKHRleHRFZGl0LnJhbmdlKSxcbiAgICAgICAgdGV4dDogdGV4dEVkaXQubmV3VGV4dFxuICAgIH07XG59XG52YXIgQ29tcGxldGlvbkFkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQ29tcGxldGlvbkFkYXB0ZXIoX3dvcmtlcikge1xuICAgICAgICB0aGlzLl93b3JrZXIgPSBfd29ya2VyO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29tcGxldGlvbkFkYXB0ZXIucHJvdG90eXBlLCBcInRyaWdnZXJDaGFyYWN0ZXJzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gWycuJywgJzonLCAnPCcsICdcIicsICc9JywgJy8nXTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgQ29tcGxldGlvbkFkYXB0ZXIucHJvdG90eXBlLnByb3ZpZGVDb21wbGV0aW9uSXRlbXMgPSBmdW5jdGlvbiAobW9kZWwsIHBvc2l0aW9uLCBjb250ZXh0LCB0b2tlbikge1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oZnVuY3Rpb24gKHdvcmtlcikge1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtlci5kb0NvbXBsZXRlKHJlc291cmNlLnRvU3RyaW5nKCksIGZyb21Qb3NpdGlvbihwb3NpdGlvbikpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICAgICAgICBpZiAoIWluZm8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgd29yZEluZm8gPSBtb2RlbC5nZXRXb3JkVW50aWxQb3NpdGlvbihwb3NpdGlvbik7XG4gICAgICAgICAgICB2YXIgd29yZFJhbmdlID0gbmV3IFJhbmdlKHBvc2l0aW9uLmxpbmVOdW1iZXIsIHdvcmRJbmZvLnN0YXJ0Q29sdW1uLCBwb3NpdGlvbi5saW5lTnVtYmVyLCB3b3JkSW5mby5lbmRDb2x1bW4pO1xuICAgICAgICAgICAgdmFyIGl0ZW1zID0gaW5mby5pdGVtcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGl0ZW0gPSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsOiBlbnRyeS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0VGV4dDogZW50cnkuaW5zZXJ0VGV4dCB8fCBlbnRyeS5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgc29ydFRleHQ6IGVudHJ5LnNvcnRUZXh0LFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJUZXh0OiBlbnRyeS5maWx0ZXJUZXh0LFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudGF0aW9uOiBlbnRyeS5kb2N1bWVudGF0aW9uLFxuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IGVudHJ5LmRldGFpbCxcbiAgICAgICAgICAgICAgICAgICAgcmFuZ2U6IHdvcmRSYW5nZSxcbiAgICAgICAgICAgICAgICAgICAga2luZDogdG9Db21wbGV0aW9uSXRlbUtpbmQoZW50cnkua2luZCksXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkudGV4dEVkaXQpIHtcbiAgICAgICAgICAgICAgICAgICAgaXRlbS5yYW5nZSA9IHRvUmFuZ2UoZW50cnkudGV4dEVkaXQucmFuZ2UpO1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmluc2VydFRleHQgPSBlbnRyeS50ZXh0RWRpdC5uZXdUZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoZW50cnkuYWRkaXRpb25hbFRleHRFZGl0cykge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmFkZGl0aW9uYWxUZXh0RWRpdHMgPSBlbnRyeS5hZGRpdGlvbmFsVGV4dEVkaXRzLm1hcCh0b1RleHRFZGl0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5Lmluc2VydFRleHRGb3JtYXQgPT09IGxzLkluc2VydFRleHRGb3JtYXQuU25pcHBldCkge1xuICAgICAgICAgICAgICAgICAgICBpdGVtLmluc2VydFRleHRSdWxlcyA9IG1vbmFjby5sYW5ndWFnZXMuQ29tcGxldGlvbkl0ZW1JbnNlcnRUZXh0UnVsZS5JbnNlcnRBc1NuaXBwZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBpdGVtO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGlzSW5jb21wbGV0ZTogaW5mby5pc0luY29tcGxldGUsXG4gICAgICAgICAgICAgICAgc3VnZ2VzdGlvbnM6IGl0ZW1zXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBDb21wbGV0aW9uQWRhcHRlcjtcbn0oKSk7XG5leHBvcnQgeyBDb21wbGV0aW9uQWRhcHRlciB9O1xuLy8gLS0tIGhvdmVyIC0tLS0tLVxuZnVuY3Rpb24gaXNNYXJrdXBDb250ZW50KHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nICYmIHR5cGVvZiB0aGluZyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHRoaW5nLmtpbmQgPT09ICdzdHJpbmcnO1xufVxuZnVuY3Rpb24gdG9NYXJrZG93blN0cmluZyhlbnRyeSkge1xuICAgIGlmICh0eXBlb2YgZW50cnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogZW50cnlcbiAgICAgICAgfTtcbiAgICB9XG4gICAgaWYgKGlzTWFya3VwQ29udGVudChlbnRyeSkpIHtcbiAgICAgICAgaWYgKGVudHJ5LmtpbmQgPT09ICdwbGFpbnRleHQnKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbHVlOiBlbnRyeS52YWx1ZS5yZXBsYWNlKC9bXFxcXGAqX3t9W1xcXSgpIytcXC0uIV0vZywgJ1xcXFwkJicpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB2YWx1ZTogZW50cnkudmFsdWVcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHsgdmFsdWU6ICdgYGAnICsgZW50cnkubGFuZ3VhZ2UgKyAnXFxuJyArIGVudHJ5LnZhbHVlICsgJ1xcbmBgYFxcbicgfTtcbn1cbmZ1bmN0aW9uIHRvTWFya2VkU3RyaW5nQXJyYXkoY29udGVudHMpIHtcbiAgICBpZiAoIWNvbnRlbnRzKSB7XG4gICAgICAgIHJldHVybiB2b2lkIDA7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KGNvbnRlbnRzKSkge1xuICAgICAgICByZXR1cm4gY29udGVudHMubWFwKHRvTWFya2Rvd25TdHJpbmcpO1xuICAgIH1cbiAgICByZXR1cm4gW3RvTWFya2Rvd25TdHJpbmcoY29udGVudHMpXTtcbn1cbnZhciBIb3ZlckFkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gSG92ZXJBZGFwdGVyKF93b3JrZXIpIHtcbiAgICAgICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgICB9XG4gICAgSG92ZXJBZGFwdGVyLnByb3RvdHlwZS5wcm92aWRlSG92ZXIgPSBmdW5jdGlvbiAobW9kZWwsIHBvc2l0aW9uLCB0b2tlbikge1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oZnVuY3Rpb24gKHdvcmtlcikge1xuICAgICAgICAgICAgcmV0dXJuIHdvcmtlci5kb0hvdmVyKHJlc291cmNlLnRvU3RyaW5nKCksIGZyb21Qb3NpdGlvbihwb3NpdGlvbikpO1xuICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChpbmZvKSB7XG4gICAgICAgICAgICBpZiAoIWluZm8pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHJhbmdlOiB0b1JhbmdlKGluZm8ucmFuZ2UpLFxuICAgICAgICAgICAgICAgIGNvbnRlbnRzOiB0b01hcmtlZFN0cmluZ0FycmF5KGluZm8uY29udGVudHMpXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBIb3ZlckFkYXB0ZXI7XG59KCkpO1xuZXhwb3J0IHsgSG92ZXJBZGFwdGVyIH07XG4vLyAtLS0gZG9jdW1lbnQgaGlnaGxpZ2h0cyAtLS0tLS1cbmZ1bmN0aW9uIHRvSGlnaGxpZ2hLaW5kKGtpbmQpIHtcbiAgICB2YXIgbUtpbmQgPSBtb25hY28ubGFuZ3VhZ2VzLkRvY3VtZW50SGlnaGxpZ2h0S2luZDtcbiAgICBzd2l0Y2ggKGtpbmQpIHtcbiAgICAgICAgY2FzZSBscy5Eb2N1bWVudEhpZ2hsaWdodEtpbmQuUmVhZDogcmV0dXJuIG1LaW5kLlJlYWQ7XG4gICAgICAgIGNhc2UgbHMuRG9jdW1lbnRIaWdobGlnaHRLaW5kLldyaXRlOiByZXR1cm4gbUtpbmQuV3JpdGU7XG4gICAgICAgIGNhc2UgbHMuRG9jdW1lbnRIaWdobGlnaHRLaW5kLlRleHQ6IHJldHVybiBtS2luZC5UZXh0O1xuICAgIH1cbiAgICByZXR1cm4gbUtpbmQuVGV4dDtcbn1cbnZhciBEb2N1bWVudEhpZ2hsaWdodEFkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRG9jdW1lbnRIaWdobGlnaHRBZGFwdGVyKF93b3JrZXIpIHtcbiAgICAgICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgICB9XG4gICAgRG9jdW1lbnRIaWdobGlnaHRBZGFwdGVyLnByb3RvdHlwZS5wcm92aWRlRG9jdW1lbnRIaWdobGlnaHRzID0gZnVuY3Rpb24gKG1vZGVsLCBwb3NpdGlvbiwgdG9rZW4pIHtcbiAgICAgICAgdmFyIHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgICAgICByZXR1cm4gdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKGZ1bmN0aW9uICh3b3JrZXIpIHsgcmV0dXJuIHdvcmtlci5maW5kRG9jdW1lbnRIaWdobGlnaHRzKHJlc291cmNlLnRvU3RyaW5nKCksIGZyb21Qb3NpdGlvbihwb3NpdGlvbikpOyB9KS50aGVuKGZ1bmN0aW9uIChpdGVtcykge1xuICAgICAgICAgICAgaWYgKCFpdGVtcykge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuICh7XG4gICAgICAgICAgICAgICAgcmFuZ2U6IHRvUmFuZ2UoaXRlbS5yYW5nZSksXG4gICAgICAgICAgICAgICAga2luZDogdG9IaWdobGlnaEtpbmQoaXRlbS5raW5kKVxuICAgICAgICAgICAgfSk7IH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBEb2N1bWVudEhpZ2hsaWdodEFkYXB0ZXI7XG59KCkpO1xuZXhwb3J0IHsgRG9jdW1lbnRIaWdobGlnaHRBZGFwdGVyIH07XG4vLyAtLS0gZG9jdW1lbnQgc3ltYm9scyAtLS0tLS1cbmZ1bmN0aW9uIHRvU3ltYm9sS2luZChraW5kKSB7XG4gICAgdmFyIG1LaW5kID0gbW9uYWNvLmxhbmd1YWdlcy5TeW1ib2xLaW5kO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgICBjYXNlIGxzLlN5bWJvbEtpbmQuRmlsZTogcmV0dXJuIG1LaW5kLkFycmF5O1xuICAgICAgICBjYXNlIGxzLlN5bWJvbEtpbmQuTW9kdWxlOiByZXR1cm4gbUtpbmQuTW9kdWxlO1xuICAgICAgICBjYXNlIGxzLlN5bWJvbEtpbmQuTmFtZXNwYWNlOiByZXR1cm4gbUtpbmQuTmFtZXNwYWNlO1xuICAgICAgICBjYXNlIGxzLlN5bWJvbEtpbmQuUGFja2FnZTogcmV0dXJuIG1LaW5kLlBhY2thZ2U7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5DbGFzczogcmV0dXJuIG1LaW5kLkNsYXNzO1xuICAgICAgICBjYXNlIGxzLlN5bWJvbEtpbmQuTWV0aG9kOiByZXR1cm4gbUtpbmQuTWV0aG9kO1xuICAgICAgICBjYXNlIGxzLlN5bWJvbEtpbmQuUHJvcGVydHk6IHJldHVybiBtS2luZC5Qcm9wZXJ0eTtcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLkZpZWxkOiByZXR1cm4gbUtpbmQuRmllbGQ7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5Db25zdHJ1Y3RvcjogcmV0dXJuIG1LaW5kLkNvbnN0cnVjdG9yO1xuICAgICAgICBjYXNlIGxzLlN5bWJvbEtpbmQuRW51bTogcmV0dXJuIG1LaW5kLkVudW07XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5JbnRlcmZhY2U6IHJldHVybiBtS2luZC5JbnRlcmZhY2U7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5GdW5jdGlvbjogcmV0dXJuIG1LaW5kLkZ1bmN0aW9uO1xuICAgICAgICBjYXNlIGxzLlN5bWJvbEtpbmQuVmFyaWFibGU6IHJldHVybiBtS2luZC5WYXJpYWJsZTtcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLkNvbnN0YW50OiByZXR1cm4gbUtpbmQuQ29uc3RhbnQ7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5TdHJpbmc6IHJldHVybiBtS2luZC5TdHJpbmc7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5OdW1iZXI6IHJldHVybiBtS2luZC5OdW1iZXI7XG4gICAgICAgIGNhc2UgbHMuU3ltYm9sS2luZC5Cb29sZWFuOiByZXR1cm4gbUtpbmQuQm9vbGVhbjtcbiAgICAgICAgY2FzZSBscy5TeW1ib2xLaW5kLkFycmF5OiByZXR1cm4gbUtpbmQuQXJyYXk7XG4gICAgfVxuICAgIHJldHVybiBtS2luZC5GdW5jdGlvbjtcbn1cbnZhciBEb2N1bWVudFN5bWJvbEFkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRG9jdW1lbnRTeW1ib2xBZGFwdGVyKF93b3JrZXIpIHtcbiAgICAgICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgICB9XG4gICAgRG9jdW1lbnRTeW1ib2xBZGFwdGVyLnByb3RvdHlwZS5wcm92aWRlRG9jdW1lbnRTeW1ib2xzID0gZnVuY3Rpb24gKG1vZGVsLCB0b2tlbikge1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSBtb2RlbC51cmk7XG4gICAgICAgIHJldHVybiB0aGlzLl93b3JrZXIocmVzb3VyY2UpLnRoZW4oZnVuY3Rpb24gKHdvcmtlcikgeyByZXR1cm4gd29ya2VyLmZpbmREb2N1bWVudFN5bWJvbHMocmVzb3VyY2UudG9TdHJpbmcoKSk7IH0pLnRoZW4oZnVuY3Rpb24gKGl0ZW1zKSB7XG4gICAgICAgICAgICBpZiAoIWl0ZW1zKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGl0ZW1zLm1hcChmdW5jdGlvbiAoaXRlbSkgeyByZXR1cm4gKHtcbiAgICAgICAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXG4gICAgICAgICAgICAgICAgZGV0YWlsOiAnJyxcbiAgICAgICAgICAgICAgICBjb250YWluZXJOYW1lOiBpdGVtLmNvbnRhaW5lck5hbWUsXG4gICAgICAgICAgICAgICAga2luZDogdG9TeW1ib2xLaW5kKGl0ZW0ua2luZCksXG4gICAgICAgICAgICAgICAgcmFuZ2U6IHRvUmFuZ2UoaXRlbS5sb2NhdGlvbi5yYW5nZSksXG4gICAgICAgICAgICAgICAgc2VsZWN0aW9uUmFuZ2U6IHRvUmFuZ2UoaXRlbS5sb2NhdGlvbi5yYW5nZSlcbiAgICAgICAgICAgIH0pOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gRG9jdW1lbnRTeW1ib2xBZGFwdGVyO1xufSgpKTtcbmV4cG9ydCB7IERvY3VtZW50U3ltYm9sQWRhcHRlciB9O1xudmFyIERvY3VtZW50TGlua0FkYXB0ZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRG9jdW1lbnRMaW5rQWRhcHRlcihfd29ya2VyKSB7XG4gICAgICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gICAgfVxuICAgIERvY3VtZW50TGlua0FkYXB0ZXIucHJvdG90eXBlLnByb3ZpZGVMaW5rcyA9IGZ1bmN0aW9uIChtb2RlbCwgdG9rZW4pIHtcbiAgICAgICAgdmFyIHJlc291cmNlID0gbW9kZWwudXJpO1xuICAgICAgICByZXR1cm4gdGhpcy5fd29ya2VyKHJlc291cmNlKS50aGVuKGZ1bmN0aW9uICh3b3JrZXIpIHsgcmV0dXJuIHdvcmtlci5maW5kRG9jdW1lbnRMaW5rcyhyZXNvdXJjZS50b1N0cmluZygpKTsgfSkudGhlbihmdW5jdGlvbiAoaXRlbXMpIHtcbiAgICAgICAgICAgIGlmICghaXRlbXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGxpbmtzOiBpdGVtcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHsgcmV0dXJuICh7XG4gICAgICAgICAgICAgICAgICAgIHJhbmdlOiB0b1JhbmdlKGl0ZW0ucmFuZ2UpLFxuICAgICAgICAgICAgICAgICAgICB1cmw6IGl0ZW0udGFyZ2V0XG4gICAgICAgICAgICAgICAgfSk7IH0pXG4gICAgICAgICAgICB9O1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBEb2N1bWVudExpbmtBZGFwdGVyO1xufSgpKTtcbmV4cG9ydCB7IERvY3VtZW50TGlua0FkYXB0ZXIgfTtcbmZ1bmN0aW9uIGZyb21Gb3JtYXR0aW5nT3B0aW9ucyhvcHRpb25zKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdGFiU2l6ZTogb3B0aW9ucy50YWJTaXplLFxuICAgICAgICBpbnNlcnRTcGFjZXM6IG9wdGlvbnMuaW5zZXJ0U3BhY2VzXG4gICAgfTtcbn1cbnZhciBEb2N1bWVudEZvcm1hdHRpbmdFZGl0UHJvdmlkZXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRG9jdW1lbnRGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKF93b3JrZXIpIHtcbiAgICAgICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgICB9XG4gICAgRG9jdW1lbnRGb3JtYXR0aW5nRWRpdFByb3ZpZGVyLnByb3RvdHlwZS5wcm92aWRlRG9jdW1lbnRGb3JtYXR0aW5nRWRpdHMgPSBmdW5jdGlvbiAobW9kZWwsIG9wdGlvbnMsIHRva2VuKSB7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbihmdW5jdGlvbiAod29ya2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gd29ya2VyLmZvcm1hdChyZXNvdXJjZS50b1N0cmluZygpLCBudWxsLCBmcm9tRm9ybWF0dGluZ09wdGlvbnMob3B0aW9ucykpLnRoZW4oZnVuY3Rpb24gKGVkaXRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlZGl0cyB8fCBlZGl0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZWRpdHMubWFwKHRvVGV4dEVkaXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIERvY3VtZW50Rm9ybWF0dGluZ0VkaXRQcm92aWRlcjtcbn0oKSk7XG5leHBvcnQgeyBEb2N1bWVudEZvcm1hdHRpbmdFZGl0UHJvdmlkZXIgfTtcbnZhciBEb2N1bWVudFJhbmdlRm9ybWF0dGluZ0VkaXRQcm92aWRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBEb2N1bWVudFJhbmdlRm9ybWF0dGluZ0VkaXRQcm92aWRlcihfd29ya2VyKSB7XG4gICAgICAgIHRoaXMuX3dvcmtlciA9IF93b3JrZXI7XG4gICAgfVxuICAgIERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyLnByb3RvdHlwZS5wcm92aWRlRG9jdW1lbnRSYW5nZUZvcm1hdHRpbmdFZGl0cyA9IGZ1bmN0aW9uIChtb2RlbCwgcmFuZ2UsIG9wdGlvbnMsIHRva2VuKSB7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbihmdW5jdGlvbiAod29ya2VyKSB7XG4gICAgICAgICAgICByZXR1cm4gd29ya2VyLmZvcm1hdChyZXNvdXJjZS50b1N0cmluZygpLCBmcm9tUmFuZ2UocmFuZ2UpLCBmcm9tRm9ybWF0dGluZ09wdGlvbnMob3B0aW9ucykpLnRoZW4oZnVuY3Rpb24gKGVkaXRzKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFlZGl0cyB8fCBlZGl0cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gZWRpdHMubWFwKHRvVGV4dEVkaXQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgcmV0dXJuIERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyO1xufSgpKTtcbmV4cG9ydCB7IERvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyIH07XG52YXIgRm9sZGluZ1JhbmdlQWRhcHRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBGb2xkaW5nUmFuZ2VBZGFwdGVyKF93b3JrZXIpIHtcbiAgICAgICAgdGhpcy5fd29ya2VyID0gX3dvcmtlcjtcbiAgICB9XG4gICAgRm9sZGluZ1JhbmdlQWRhcHRlci5wcm90b3R5cGUucHJvdmlkZUZvbGRpbmdSYW5nZXMgPSBmdW5jdGlvbiAobW9kZWwsIGNvbnRleHQsIHRva2VuKSB7XG4gICAgICAgIHZhciByZXNvdXJjZSA9IG1vZGVsLnVyaTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dvcmtlcihyZXNvdXJjZSkudGhlbihmdW5jdGlvbiAod29ya2VyKSB7IHJldHVybiB3b3JrZXIucHJvdmlkZUZvbGRpbmdSYW5nZXMocmVzb3VyY2UudG9TdHJpbmcoKSwgY29udGV4dCk7IH0pLnRoZW4oZnVuY3Rpb24gKHJhbmdlcykge1xuICAgICAgICAgICAgaWYgKCFyYW5nZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmFuZ2VzLm1hcChmdW5jdGlvbiAocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgICAgICBzdGFydDogcmFuZ2Uuc3RhcnRMaW5lICsgMSxcbiAgICAgICAgICAgICAgICAgICAgZW5kOiByYW5nZS5lbmRMaW5lICsgMVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiByYW5nZS5raW5kICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQua2luZCA9IHRvRm9sZGluZ1JhbmdlS2luZChyYW5nZS5raW5kKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBGb2xkaW5nUmFuZ2VBZGFwdGVyO1xufSgpKTtcbmV4cG9ydCB7IEZvbGRpbmdSYW5nZUFkYXB0ZXIgfTtcbmZ1bmN0aW9uIHRvRm9sZGluZ1JhbmdlS2luZChraW5kKSB7XG4gICAgc3dpdGNoIChraW5kKSB7XG4gICAgICAgIGNhc2UgbHMuRm9sZGluZ1JhbmdlS2luZC5Db21tZW50OiByZXR1cm4gbW9uYWNvLmxhbmd1YWdlcy5Gb2xkaW5nUmFuZ2VLaW5kLkNvbW1lbnQ7XG4gICAgICAgIGNhc2UgbHMuRm9sZGluZ1JhbmdlS2luZC5JbXBvcnRzOiByZXR1cm4gbW9uYWNvLmxhbmd1YWdlcy5Gb2xkaW5nUmFuZ2VLaW5kLkltcG9ydHM7XG4gICAgICAgIGNhc2UgbHMuRm9sZGluZ1JhbmdlS2luZC5SZWdpb246IHJldHVybiBtb25hY28ubGFuZ3VhZ2VzLkZvbGRpbmdSYW5nZUtpbmQuUmVnaW9uO1xuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xufVxuIiwiLyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAqICBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqICBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG4ndXNlIHN0cmljdCc7XG5pbXBvcnQgeyBXb3JrZXJNYW5hZ2VyIH0gZnJvbSAnLi93b3JrZXJNYW5hZ2VyLmpzJztcbmltcG9ydCAqIGFzIGxhbmd1YWdlRmVhdHVyZXMgZnJvbSAnLi9sYW5ndWFnZUZlYXR1cmVzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBzZXR1cE1vZGUoZGVmYXVsdHMpIHtcbiAgICB2YXIgY2xpZW50ID0gbmV3IFdvcmtlck1hbmFnZXIoZGVmYXVsdHMpO1xuICAgIHZhciB3b3JrZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB1cmlzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICB1cmlzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsaWVudC5nZXRMYW5ndWFnZVNlcnZpY2VXb3JrZXIuYXBwbHkoY2xpZW50LCB1cmlzKTtcbiAgICB9O1xuICAgIHZhciBsYW5ndWFnZUlkID0gZGVmYXVsdHMubGFuZ3VhZ2VJZDtcbiAgICAvLyBhbGwgbW9kZXNcbiAgICBtb25hY28ubGFuZ3VhZ2VzLnJlZ2lzdGVyQ29tcGxldGlvbkl0ZW1Qcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgbGFuZ3VhZ2VGZWF0dXJlcy5Db21wbGV0aW9uQWRhcHRlcih3b3JrZXIpKTtcbiAgICBtb25hY28ubGFuZ3VhZ2VzLnJlZ2lzdGVySG92ZXJQcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgbGFuZ3VhZ2VGZWF0dXJlcy5Ib3ZlckFkYXB0ZXIod29ya2VyKSk7XG4gICAgbW9uYWNvLmxhbmd1YWdlcy5yZWdpc3RlckRvY3VtZW50SGlnaGxpZ2h0UHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IGxhbmd1YWdlRmVhdHVyZXMuRG9jdW1lbnRIaWdobGlnaHRBZGFwdGVyKHdvcmtlcikpO1xuICAgIG1vbmFjby5sYW5ndWFnZXMucmVnaXN0ZXJMaW5rUHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IGxhbmd1YWdlRmVhdHVyZXMuRG9jdW1lbnRMaW5rQWRhcHRlcih3b3JrZXIpKTtcbiAgICBtb25hY28ubGFuZ3VhZ2VzLnJlZ2lzdGVyRm9sZGluZ1JhbmdlUHJvdmlkZXIobGFuZ3VhZ2VJZCwgbmV3IGxhbmd1YWdlRmVhdHVyZXMuRm9sZGluZ1JhbmdlQWRhcHRlcih3b3JrZXIpKTtcbiAgICBtb25hY28ubGFuZ3VhZ2VzLnJlZ2lzdGVyRG9jdW1lbnRTeW1ib2xQcm92aWRlcihsYW5ndWFnZUlkLCBuZXcgbGFuZ3VhZ2VGZWF0dXJlcy5Eb2N1bWVudFN5bWJvbEFkYXB0ZXIod29ya2VyKSk7XG4gICAgLy8gb25seSBodG1sXG4gICAgaWYgKGxhbmd1YWdlSWQgPT09ICdodG1sJykge1xuICAgICAgICBtb25hY28ubGFuZ3VhZ2VzLnJlZ2lzdGVyRG9jdW1lbnRGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBsYW5ndWFnZUZlYXR1cmVzLkRvY3VtZW50Rm9ybWF0dGluZ0VkaXRQcm92aWRlcih3b3JrZXIpKTtcbiAgICAgICAgbW9uYWNvLmxhbmd1YWdlcy5yZWdpc3RlckRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKGxhbmd1YWdlSWQsIG5ldyBsYW5ndWFnZUZlYXR1cmVzLkRvY3VtZW50UmFuZ2VGb3JtYXR0aW5nRWRpdFByb3ZpZGVyKHdvcmtlcikpO1xuICAgICAgICBuZXcgbGFuZ3VhZ2VGZWF0dXJlcy5EaWFnbm9zdGljc0FkYXB0ZXIobGFuZ3VhZ2VJZCwgd29ya2VyLCBkZWZhdWx0cyk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==